package org.getalp.blexisma.api;

import java.io.Serializable;
import java.util.ArrayList;

/**
 * @author Alexandre Labadi√©
 * */
public class SemanticDefinition implements Serializable
{

	/**
	 * Autogenerated serial version UID
	 */
	private static final long serialVersionUID = -5075694402390089483L;
	private ConceptualVector mainVector;
	private ArrayList<Sense> senseList;
	private final String id;
	//TODO Meilleur gestion dela langue
	
	public SemanticDefinition(){
		this.id = "#empty";
		this.mainVector = null;
		if (null == this.senseList) {
			this.senseList = new ArrayList<Sense>();
		}
	}
	
	/**
	 * @param mainVector : The main vector of the semantic definition
	 * @param meaningList : The list of possible meaning for the semantic definition
	 * */
	public SemanticDefinition(String id, ConceptualVector mainVector, ArrayList<Sense> meaningList){
		this.id = id;
		this.mainVector = mainVector;
		this.senseList = meaningList;
		if (null == this.senseList) {
			this.senseList = new ArrayList<Sense>();
		}
	}
	
	public SemanticDefinition(String id, int dimension, int codeLength){
		this.id = id;
		this.mainVector = new ConceptualVector(dimension, codeLength);
		this.senseList = new ArrayList<Sense>();
	}
	
	public void computeMainVector(){
		mainVector = new ConceptualVector(mainVector.getDimension(), mainVector.getCodeLength());
		for (Sense s : senseList){
			if (s.getVector()!=null)
				mainVector.add(s.getVector());
		}
		mainVector.normalise();
	}
	
	/**
	 * @return the main vector of the definition
	 * */
	public ConceptualVector getMainVector() {
		return mainVector;
	}
	
	/**
	 * @param mainVector : the main vector of the definition
	 * */
	public void setMainVector(ConceptualVector mainVector) {
		this.mainVector = mainVector;
	}
	
	/**
	 * @return the serial version UID
	 * */
	public static long getSerialversionuid() {
		return serialVersionUID;
	}
	
	/**
	 * @return the list of possible meanings for the definition
	 * */
	public ArrayList<Sense> getSenseList() {
		return senseList;
	}

	public String getId() {
		return id;
	}

	public void setSenseList(ArrayList<Sense> senseList) {
		this.senseList = senseList;
	}
	
	public void fuseSenseList(ArrayList<Sense> list){
		this.senseList.addAll(list);
	}
	
	public void addSense(Sense s){
		if (!this.senseList.contains(s))
			this.senseList.add(s);
	}

	@Override
	public String toString() {
		return "[" + this.id + ", " + ((null == mainVector) ? "null" : "a conceptual vector, ") + ((null == senseList) ? "null" : senseList.size() + " senses") + "]";
	}
	
	public boolean isEmpty(){
		return (mainVector == null)&&(senseList == null || senseList.size()<1);
	}
	
	public void concatDef(SemanticDefinition def) {
		if (this.senseList == null) this.senseList = new ArrayList<Sense>();
		for (int i = 0; i < def.getSenseList().size(); i++) {
			this.senseList.add(def.getSenseList().get(i));
		}
	}
}
