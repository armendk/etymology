/**
 * *
 * ExploitExecutions.java
 * Created on 25 oct. 2010 14:33:03
 * 
 * Copyright (c) 2010 Didier Schwab
 */
package helpers;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

/**
 * @author Didier SCHWAB
 *
 */
public class ExploitExecutions {


    public static void executions2cycles(String in, String out){

	File fileIN = new File(in);
	String buf;
	File folderCycle;
	int numcycle;
	String numExec;
	Process P;
	Runtime R = Runtime.getRuntime();
	String folderScorer = "/Users/schwab/Documents/WSD/XP-schwab/new-scorer";

	String[] cmdarray = new String[4];
	cmdarray[0] = "perl";
	cmdarray[1] = "/Users/schwab/Documents/WSD/XP-schwab/new-scorer/scorer.pl";
	cmdarray[3] = "-d";
	//	cmdarray[4] = ">";

	for(File fileExecution : fileIN.listFiles()){

	    System.out.println(fileExecution);
	    numExec = fileExecution.getName();
	    System.out.println(numExec);
	    for(File fileCycle : fileExecution.listFiles()){		


		//		System.out.println(fileCycle.getName());

		buf = fileCycle.getName().substring(7, fileCycle.getName().lastIndexOf('.'));
		numcycle = Integer.parseInt(buf);

		if(numcycle<10)
		    buf = "00"+numcycle;
		else
		    if(numcycle<100)
			buf = "0"+numcycle;
		    else
			buf = ""+numcycle;

		folderCycle = new File(out + '/' + buf);
		if(!folderCycle.exists())
		    folderCycle.mkdir();

		//		System.out.println(fileCycle);
		//		System.out.println(new File(folderCycle.getAbsolutePath()+'/'+numExec+".ans"));

		cmdarray[2] = fileCycle.getAbsolutePath();
		//cmdarray[5] = folderCycle.getAbsolutePath() + '/' + numExec+".sco";

		try {
		    P = R.exec(cmdarray, null, new File(folderScorer));
		    FileOutputStream os = new FileOutputStream(folderCycle.getAbsolutePath() + '/' + numExec+".sco");
		    OutputStreamWriter osw = new OutputStreamWriter(os);
		    BufferedWriter writer = new BufferedWriter(osw);
		    BufferedReader reader = new BufferedReader(new InputStreamReader(P.getInputStream()));
		    String ligneIn;
		    while((ligneIn=reader.readLine()) != null){

			writer.append(ligneIn);
			writer.append('\n');
		    }
		    writer.flush();
		} catch (IOException e) {
		    // TODO Auto-generated catch block
		    e.printStackTrace();
		}
		//System.exit(0);

	    }
	    //System.exit(0);
	}

    }


    /** 
     * @param fileAnswer
     * @param numText
     */




    public static  double[] getPrecision(String fileAnswer){

	double [] T = new double[6];

	try {
	    BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(new File(fileAnswer))));
	    String ligneIn;

	    ligneIn=reader.readLine();
	    ligneIn=reader.readLine();
	    ligneIn=reader.readLine();
	    T[0] = Double.parseDouble(ligneIn.substring(33, 40));
	    ligneIn=reader.readLine();
	    T[1] = Double.parseDouble(ligneIn.substring(33, 40));
	    ligneIn=reader.readLine();
	    T[2] = Double.parseDouble(ligneIn.substring(33, 40));
	    ligneIn=reader.readLine();
	    T[3] = Double.parseDouble(ligneIn.substring(33, 40));
	    ligneIn=reader.readLine();
	    T[4] = Double.parseDouble(ligneIn.substring(33, 40));
	    ligneIn=reader.readLine();
	    ligneIn=reader.readLine();
	    T[5] = Double.parseDouble(ligneIn.substring(36, 43));
	} catch (NumberFormatException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	} catch (FileNotFoundException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	} catch (IOException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

	return T;
    }

    public static void extractAverageMean(String folderScore, String fileGraph){


	double buf = 0;
	double[] T;
	BufferedWriter writer = null;

	try {
	    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileGraph)));
	} catch (FileNotFoundException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

	File F = new File(folderScore);

	System.out.println(folderScore);

	for(File folder : F.listFiles()){

	    System.out.println(folder);
	    for(File scores : folder.listFiles()){

		T = getPrecision(scores.getAbsolutePath());
		buf += T[5];
	    }
	    try {
		writer.append(buf/100+"");
		writer.append('\n');
		writer.flush();
	    } catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	    }
	    System.out.println(buf/100);
	    buf=0;
	}

    }

    public static void extractMax(String folderScore, String fileGraph){


	double buf = 0;
	double[] T;
	BufferedWriter writer = null;

	try {
	    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileGraph)));
	} catch (FileNotFoundException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

	File F = new File(folderScore);

	System.out.println(folderScore);

	for(File folder : F.listFiles()){

	    System.out.println(folder);
	    for(File scores : folder.listFiles()){

		T = getPrecision(scores.getAbsolutePath());
		if(T[5]>buf)
		    buf=T[5];
	    }
	    try {
		writer.append(buf+"");
		writer.append('\n');
		writer.flush();
	    } catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	    }
	    System.out.println(buf);
	    buf=0;
	}

    }

    public static void extractMin(String folderScore, String fileGraph){


	double buf = Double.MAX_VALUE;
	double[] T;
	BufferedWriter writer = null;

	try {
	    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileGraph)));
	} catch (FileNotFoundException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

	File F = new File(folderScore);

	System.out.println(folderScore);

	for(File folder : F.listFiles()){

	    System.out.println(folder);
	    for(File scores : folder.listFiles()){

		T = getPrecision(scores.getAbsolutePath());
		if(T[5]<buf)
		    buf=T[5];
	    }
	    try {
		writer.append(buf+"");
		writer.append('\n');
		writer.flush();

	    } catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	    }
	    System.out.println(buf);
	    buf=Double.MAX_VALUE;
	}

    }
    
    public static void extractEtendue(String folderScore, String fileGraph){

	double min = Double.MAX_VALUE;
	double max = 0;
	double[] T;
	BufferedWriter writer = null;

	try {
	    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileGraph)));
	} catch (FileNotFoundException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

	File F = new File(folderScore);

	System.out.println(folderScore);

	for(File folder : F.listFiles()){

	    System.out.println(folder);
	    for(File scores : folder.listFiles()){

		T = getPrecision(scores.getAbsolutePath());
		if(T[5] < min)
		    min = T[5];
		if(T[5] > max)
		    max = T[5];
	    }
	    try {
		writer.append((max-min)+"");
		writer.append('\n');
		writer.flush();

	    } catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	    }
	    System.out.println(max-min);
	    min=Double.MAX_VALUE;
	    max=0;
	}

    }
    
    public static void extractAverageEtendue(String folderScore, String fileGraph){

	double min = Double.MAX_VALUE;
	double max = 0;
	double sum = 0;
	int i = 0;
	double[] T;
	BufferedWriter writer = null;

	try {
	    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileGraph)));
	} catch (FileNotFoundException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

	File F = new File(folderScore);

	System.out.println(folderScore);

	for(File folder : F.listFiles()){

	    System.out.println(folder);
	    for(File scores : folder.listFiles()){

		T = getPrecision(scores.getAbsolutePath());
		if(T[5] < min)
		    min = T[5];
		if(T[5] > max)
		    max = T[5];
	    }
	    try {
		sum+=(max-min);
		writer.append((sum/(i++))+"");
		writer.append('\n');
		writer.flush();

	    } catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	    }
	    System.out.println(sum/i);
	   // System.out.println(i);
	    min=Double.MAX_VALUE;
	    max=0;
	}

    }

    public static void extractMedian(String folderScore, String fileGraph){


	double buf;
	double[] T;
	BufferedWriter writer = null;
	ArrayList<Double> minValues = new ArrayList<Double>(51);


	try {
	    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileGraph)));
	} catch (FileNotFoundException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

	File F = new File(folderScore);

	System.out.println(folderScore);
	int i;

	for(File folder : F.listFiles()){

	    System.out.println(folder);
	    for(File scores : folder.listFiles()){

		T = getPrecision(scores.getAbsolutePath());
		
		if(minValues.size()==0){

		    minValues.add(new Double(T[5]));
		}
		else{
		    for(i = minValues.size()-1; i>=0 && minValues.get(i).doubleValue() < T[5]; i--);
		    if(i < 50){

			minValues.add(i+1, new Double(T[5]));
			if(minValues.size()>51)
			    minValues.remove(51);
		    }
		}
	    }
	    
	    buf = (minValues.get(49).doubleValue() + minValues.get(50).doubleValue())/2;
	    
	    try {
		writer.append(buf+"");
		writer.append('\n');
		writer.flush();

	    } catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	    }
	    System.out.println(buf);
	    minValues = new ArrayList<Double>(51);
	}

    }
    
    public static void extractMaxValue(String folderScore, String fileGraph){


	double buf = 0;
	double[] T;
	BufferedWriter writer = null;

	try {
	    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileGraph)));
	} catch (FileNotFoundException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	}

	File F = new File(folderScore);

	System.out.println(folderScore);

	for(File folder : F.listFiles()){

	    System.out.println(folder);
	    for(File scores : folder.listFiles()){

		T = getPrecision(scores.getAbsolutePath());
		if(T[5]>buf)
		    buf=T[5];
	    }
	    try {
		writer.append(buf+"");
		writer.append('\n');
		writer.flush();
	    } catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	    }
	    System.out.println(buf);
	   // buf=0;
	}

    }


    /*  public static void extractScores(String in, String out){

	File fileIN = new File(in);
	String buf;
	File folderCycle, copy;
	int numcycle;
	String numExec;
	File F = new File("/Users/schwab/Documents/WSD/XP-schwab/new-scorer");
	File answer;
	Runtime R = Runtime.getRuntime();
	String[] cmdarray = new String[6];
	cmdarray[0] = "perl";
	cmdarray[1] = "/Users/schwab/Documents/WSD/XP-schwab/new-scorer/scorer.pl";
	cmdarray[3] = "-d";
	cmdarray[4] = ">";

	for(File fileExecution : fileIN.listFiles()){

	    System.out.println(fileExecution);
	    numExec = fileExecution.getName();
	    System.out.println(numExec);
	    for(File fileCycle : fileExecution.listFiles()){		


		cmdarray[2] = fileCycle.getAbsolutePath();
		folderCycle = new File(out + '/' + buf);
		cmdarray[5] = folderCycle.getAbsolutePath();


	    }
	}


    }*/



    /** copie le fichier source dans le fichier resultat
     * retourne vrai si cela réussit
     */
    /*    private static void copyFile(File source, File dest){

	FileChannel in = null; // canal d'entrée
	FileChannel out = null; // canal de sortie

	try {
	    // Init
	    in = new FileInputStream(source).getChannel();
	    out = new FileOutputStream(dest).getChannel();

	    // Copie depuis le in vers le out
	    in.transferTo(0, in.size(), out);
	} catch (Exception e) {
	    e.printStackTrace(); // n'importe quelle exception
	} finally { // finalement on ferme
	    if(in != null) {
		try {
		    in.close();
		} catch (IOException e) {
		    e.printStackTrace(System.out);
		}
	    }
	    if(out != null) {
		try {
		    out.close();
		} catch (IOException e) {
		    e.printStackTrace(System.out);
		}
	    }
	}
    }*/

    /**
     * @param args
     */
    public static void main(String[] args) {

	//executions2cycles("/Users/schwab/Documents/WSD/XP-schwab/answers/Fourmis/results-dict-adapted-all-relations/execution/answers-cycles-500/results-cyc500-allcycles", "/Users/schwab/Documents/WSD/XP-schwab/answers/Fourmis/results-dict-adapted-all-relations/execution/answers-cycles-500/results-by-cycles");
	//extractScores("/Users/schwab/Documents/WSD/XP-schwab/answers/Fourmis/results-dict-adapted-all-relations/execution/answers-cycles-500/results-by-cycles", "/Users/schwab/Documents/WSD/XP-schwab/answers/Fourmis/results-dict-adapted-all-relations/execution/answers-cycles-500/scores-by-cycles");

	extractAverageEtendue("/Users/schwab/Documents/WSD/XP-schwab/answers/Fourmis/results-dict-adapted-all-relations/execution/answers-cycles-500/results-by-cycles/", "/Users/schwab/Documents/WSD/XP-schwab/answers/Fourmis/results-dict-adapted-all-relations/execution/answers-cycles-500/graphs/averageEtendue.txt");
    }

}
