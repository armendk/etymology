 -----
 Developer Guide
 -----
 The Blexisma Team
 -----
 -----


Blexisma Developer Guide
~~~~~~~~~~~~~~~~~~~~~~~~~

%{toc|section=0|fromDepth=2|toDepth=3}

* Setting up the developer environment

** Quick story

 you will need:

  * java (jdk 1.6)
  
  * maven2 (http://maven.apache.org) (we use 2.2.1)
  
  * subversion
  
  * any java aware editor or Programming IDE


** Setting up java

  As we are dealing with really big files (more 2Gb, like the french wiktionary dump),
  we really need a 64 bits JVM. Hence we decided to use JVM 1.6. You'll have to install the Java 1.6 
  JDK and configure your environment so that it is used. Such a configuration can be tricky, though, so do not forget that :

  * if you compile using command line, the JAVA_HOME should point to the correct JVM
  * if you compile using command line on a Mac OS X, set up JAVA_HOME correctly, but also set the global variable JAVA_VERSION to "1.6" so that maven will use it for when launching the java compiler.
  * if you use Eclipse, setup the installed JRE of your project to 1.6 and take care to the maven configuration.

** Setting up maven
  
  {{{http://maven.apache.org}Maven}} is used to develop and deploy blexisma. Hence, make sure maven is correctly set up on your system.
  
  * You can find the current version of maven by typing <<<mvn --version>>> in a terminal. 

  * The developers currently use maven <<2.2.1>>.
  
  * If you plan to work on the project's web site and to deploy it on the project home page's server, also create or edit the file
      <<<~/.m2/settings.xml>>> and add the following to the xml settings tree:
      
+-------------------+
<settings>
    ...
    <servers>
        ...
        <server>
            <id>blexisma.website</id>
            <username>your_user_name_on_blexisma_server</username>
            <privateKey>/path/to/your_private_key</privateKey>
        </server>
    </servers>
</settings>
+-------------------+
    
    Make also sure that the specified private key allows you to access the web server by ssh.
    
    [Note:] You may also use user/password combination in your settings.xml, see maven doc for this.
     
** Setting up subversion

    Refer to {{{http://subversion.tigris.org/}subversion}} docs to install subversion on you system. Note that it may already be present.
    
    * You may type <<<svn --version>>> to know what is the currently installed version.
    
    []
    
    [Note:] If you plan to use subversion both from the command line (terminal) and from eclipse, it may be a good thing to ensure that 
        both clients use the same version.
    
 
** Installing Cougaar libs in you maven repository

	[Note:] This step is not required anymore as we have setup a custom repository that is known by the project. All dependencies should be found now.
        
~~  Download and expand cougaar multi-agent plateform (http://www.cougaar.org/)
~~
~~    * expand cougaar.zip and cougaar-support.zip in your "$cougaar_install" folder.
~~
~~  Install cougaar libs in your local maven repository
~~
~~+------------------------------------------------------------------------+
~~    cd $cougaar_install
~~    mvn install:install-file -DgroupId=org.cougaar -DartifactId=javaiopatch -Dversion=12.4 -Dpackaging=jar -Dfile=lib/javaiopatch.jar 
~~    mvn install:install-file -DgroupId=org.cougaar -DartifactId=bootstrap -Dversion=12.4 -Dpackaging=jar -Dfile=lib/bootstrap.jar 
~~    mvn install:install-file -DgroupId=org.cougaar -DartifactId=util -Dversion=12.4 -Dpackaging=jar -Dfile=lib/util.jar 
~~    mvn install:install-file -DgroupId=org.cougaar -DartifactId=core -Dversion=12.4 -Dpackaging=jar -Dfile=lib/core.jar 
~~+------------------------------------------------------------------------+

** Checking out source code

  See the ligforge project page at {{https://ligforge.imag.fr/projects/blexisma/}}.

* Compiling blexisma 

** With a command line

  Go to your blexisma root folder and type the following command:
  
+-------------------+
  mvn install
+-------------------+
  
  If it is the first time you are using maven, maven will download a lot of dependencies from the Internet. Next times it will be quicker.
  
  This command will:
  
  * download all necessary dependencies (they will be installed in the "local repository" under <<<~/.m2>>> folder).
  
  * compile all the blexisma code
  
  * run unit tests
  
  * package every module in a jar and install it in the local repository.
  
* Using eclipse

** Eclipse installation and plug-ins  
  
  Install eclipse and additional plug-ins

    * Download eclipse from the web (we currently use Galileo)

    * Add plugins:

      * m2eclipse (we currently use 0.10.0)

      * subversive (available from galileo set of plugins)

    * configure m2eclipse (so that it is compatible with command line mvn)

  Update command line svn to 1.6.9 so that it is compatible with eclipse svn client.

  Install/use JDK 1.6 as jdk 1.5 (at least in its 32bit version) is not able to process files of the size of the french wiktionary dump.

  [Note:] On Mac OS X, export JAVA_HOME and modify PATH so that the command line java and javac v 1.6 are used. 
          (Warning, using the "Java Preferences" app is not enough as it won't change the version of java used by mvn and other common launch scripts).

** Importing projects in Eclipse

  Use the Import existing Maven project to import the projects to your eclipse workspace.

  [Warning:] source code is in UTF-8 ! so make sure your workspace encoding is setup correctly.
  
  [Warning:] make sure the build path uses jdk 1.6. (see compiler path preferences.)

* Contributing code to blexisma

** Code Style

  To be defined.
  
  [Note:] We should integrate code validation process with maven to force developers contributing code to validate it.

** Tests

  <<<JUnit>>> is used in all modules of the project to develop unit tests for the classes you are developing. In an ideal situation, 
  begin by implementing a unit test that is exhibiting the buggy behaviour. Then patch your class and the test should pass.
  
  Please, maven being very strict on the fact that tests should pass, do not commit a code that fail unit tests.

** Reporting bugs

** Note for deployers of 3rd party jars

  Stanford parser, morphadorner, textcat and cougaar jars are deployed on a repository. For this, we use the following:
  
+--------------------------------+
mvn deploy:deploy-file -DgroupId=edu.stanford.nlp \
  -DartifactId=stanford-parser \
  -Dversion=2011-04-20 \
  -Dpackaging=jar \
  -Dfile=stanford-parser-2011-04-20.jar \
  -DrepositoryId=getalp.repository \
  -Durl=scp://getalp.imag.fr/opt/www/m2

mvn deploy:deploy-file -DgroupId=edu.stanford.nlp \
  -DartifactId=stanford-parser \
  -Dversion=2011-04-20 \
  -Dpackaging=java-source \
  -Dfile=stanford-parser-2011-04-20-sources.jar \
  -DrepositoryId=getalp.repository \
  -Durl=scp://getalp.imag.fr/opt/www/m2 -DgeneratePom=false
  
mvn deploy:deploy-file -DgroupId=edu.northwestern \
  -DartifactId=morphadorner \
  -Dversion=2009-04-30 \
  -Dpackaging=jar \
  -Dfile=morphadorner-2009-04-30.jar \
  -DrepositoryId=getalp.repository \
  -Durl=scp://getalp.imag.fr/opt/www/m2
  
mvn deploy:deploy-file -DgroupId=edu.northwestern \
  -DartifactId=morphadorner \
  -Dversion=2009-04-30 \
  -Dpackaging=java-source \
  -Dfile=morphadorner-2009-04-30-sources.jar \
  -DrepositoryId=getalp.repository \
  -Durl=scp://getalp.imag.fr/opt/www/m2
  
 mvn deploy:deploy-file -DgroupId=org.knallgrau.utils \
  -DartifactId=textcat \
  -Dversion=1.0.1 \
  -Dpackaging=jar \
  -Dfile=textcat-1.0.1.jar \
  -DrepositoryId=getalp.repository \
  -Durl=scp://getalp.imag.fr/opt/www/m2
+--------------------------------+



