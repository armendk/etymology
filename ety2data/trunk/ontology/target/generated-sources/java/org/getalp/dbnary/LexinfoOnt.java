/* CVS $Id: $ */
package org.getalp.dbnary; 
import com.hp.hpl.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from /Users/esterpantaleo/src/DBnary/trunk/ontology/src/main/resources/org/getalp/dbnary/lexinfo.owl 
 * @author Auto-generated by schemagen on 14 Apr 2016 13:58 
 */
public class LexinfoOnt {
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://www.lexinfo.net/ontology/2.0/lexinfo#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>The ontology's owl:versionInfo as a string</p> */
    public static final String VERSION_INFO = "2.0";
    
    /** <p>A linking element used to identify a relation between an abbreviation and 
     *  its full or expanded form.</p>
     */
    public static final Property abbreviationFor = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#abbreviationFor" );
    
    public static final Property accusativeCaseForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#accusativeCaseForm" );
    
    /** <p>A linking element used to identify a relation between an acronym and its full 
     *  or expanded form.</p>
     */
    public static final Property acronymFor = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#acronymFor" );
    
    public static final Property adjunct = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#adjunct" );
    
    public static final Property adpositionalObject = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#adpositionalObject" );
    
    public static final Property adverbialComplement = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#adverbialComplement" );
    
    /** <p>The characteristic of a word indicating that in a given discourse community, 
     *  its referent is considered to be alive or to possess a quality of volition 
     *  or consciousness.</p>
     */
    public static final Property animacy = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#animacy" );
    
    /** <p>A term or lexeme whose concept or sense constitutes the opposite of the concept 
     *  represented by a second term or lexeme.</p>
     */
    public static final Property antonym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#antonym" );
    
    /** <p>Property used to qualify something similar but not exactly the same</p> */
    public static final Property approximate = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#approximate" );
    
    public static final Property approximateSynonym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#approximateSynonym" );
    
    /** <p>Category associated to verbs and referring to the way the grammar marks the 
     *  duration or type of temporal activity.</p>
     */
    public static final Property aspect = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#aspect" );
    
    /** <p>A relation between two concepts having a non-hierarchical thematic connection 
     *  by virtue of experience.</p>
     */
    public static final Property associativeRelation = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#associativeRelation" );
    
    public static final Property attributiveArg = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#attributiveArg" );
    
    /** <p>In a given sentence, the way in which the form of a word changes in order 
     *  to express a relationship with one or several words of the sentence. The morphological 
     *  modification may apply to nouns, pronouns noun phrase constituents, such as 
     *  adjectives or numerals.</p>
     */
    public static final Property case_ = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#case" );
    
    /** <p>A concept that is related to another concept by virtue of the fact that it 
     *  plays a causative role with respect to that concept.</p>
     */
    public static final Property causallyRelatedConcept = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#causallyRelatedConcept" );
    
    public static final Property clausalArg = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#clausalArg" );
    
    /** <p>A linking element used to identify a relation between a clipped term and its 
     *  full or expanded form.</p>
     */
    public static final Property clippedTermFor = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#clippedTermFor" );
    
    /** <p>Categorization of the different types of clitics</p> */
    public static final Property cliticness = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#cliticness" );
    
    public static final Property collocation = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#collocation" );
    
    public static final Property comparativeAdjunct = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#comparativeAdjunct" );
    
    public static final Property comparativeDegreeForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#comparativeDegreeForm" );
    
    /** <p>A noun phrase that follows a copula or similar verb, as for example an idiot 
     *  in the sentence He is an idiot. - A clause that serves as the subject or direct 
     *  object of a verb or the direct object of a preposition, as for example that 
     *  he would be early in the sentence I hoped that he would be early</p>
     */
    public static final Property complement = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#complement" );
    
    /** <p>The full form that corresponds to a contracted form.</p> */
    public static final Property contractionFor = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#contractionFor" );
    
    /** <p>A subordinate concept having the same nearest superordinate concept and same 
     *  criterion of subdivision as some other concept in a given concept system.</p>
     */
    public static final Property coordinateConcept = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#coordinateConcept" );
    
    /** <p>Used with copula constructions. This represents the subject/object in a copula 
     *  construction. As such constructions are reversible this property is used instead 
     *  of the usual verb subject/object. E,g., Barack Obama is the president/The 
     *  president is Barack Obama</p>
     */
    public static final Property copulativeArg = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#copulativeArg" );
    
    /** <p>Indicates the subject of a copula construction. It is assumed that by using 
     *  this the copula construction is not reversible e.g., He is happy/*happy is 
     *  him</p>
     */
    public static final Property copulativeSubject = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#copulativeSubject" );
    
    /** <p>Indication specifying whether the usage is old or modern.</p> */
    public static final Property dating = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#dating" );
    
    public static final Property dativeCaseForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#dativeCaseForm" );
    
    public static final Property declarativeClause = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#declarativeClause" );
    
    /** <p>Property about the possiblity to identify an entity.</p> */
    public static final Property definiteness = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#definiteness" );
    
    /** <p>Property concerning comparison.</p> */
    public static final Property degree = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#degree" );
    
    public static final Property derivedForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#derivedForm" );
    
    /** <p>A description in general prose text of the issues that are indicated by the 
     *  context. The description field can occur at many different places in a component 
     *  and profile.</p>
     */
    public static final Property description = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#description" );
    
    /** <p>relation between a phrase and a verb, in which the relation is central to 
     *  the verb</p>
     */
    public static final Property directObject = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#directObject" );
    
    public static final Property dualNumberForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#dualNumberForm" );
    
    /** <p>Morpheme that has a particular status with regards to the word's etymology.</p> */
    public static final Property etymologicalRoot = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#etymologicalRoot" );
    
    /** <p>Information on the origin of a word and the development of its meaning.</p> */
    public static final Property etymology = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#etymology" );
    
    /** <p>Completely correct in every detail</p> */
    public static final Property exact = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#exact" );
    
    /** <p>A statement that describes and clarifies a concept and makes it understandable, 
     *  but does not necessarily differentiate it from other concepts.</p>
     */
    public static final Property explanation = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#explanation" );
    
    /** <p>Property referring to finite and non-finite status of a verbal form.</p> */
    public static final Property finiteness = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#finiteness" );
    
    public static final Property firstPersonForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#firstPersonForm" );
    
    public static final Property formCaseVariant = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#formCaseVariant" );
    
    public static final Property formDegreeVariant = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#formDegreeVariant" );
    
    public static final Property formMoodVariant = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#formMoodVariant" );
    
    public static final Property formNumberVariant = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#formNumberVariant" );
    
    public static final Property formPersonVariant = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#formPersonVariant" );
    
    public static final Property formPositivityVariant = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#formPositivityVariant" );
    
    public static final Property formTenseVariant = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#formTenseVariant" );
    
    /** <p>The relative commonness with which a term occurs.</p> */
    public static final Property frequency = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#frequency" );
    
    /** <p>A linking element used to identify a relation between any full form of a term 
     *  or lexical unit and its abbreviated form.</p>
     */
    public static final Property fullFormFor = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#fullFormFor" );
    
    public static final Property futureTenseForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#futureTenseForm" );
    
    /** <p>A grammatical category that indicates grammatical relationships between words 
     *  in sentences.</p>
     */
    public static final Property gender = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#gender" );
    
    public static final Property genitiveCaseForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#genitiveCaseForm" );
    
    public static final Property genitiveObject = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#genitiveObject" );
    
    /** <p>Description of a specific form used in a certain region as opposed to another 
     *  form used in another region</p>
     */
    public static final Property geographicalVariant = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#geographicalVariant" );
    
    public static final Property gerundClause = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#gerundClause" );
    
    /** <p>In TEI: A phrase or word used to provide a gloss or definition for some other 
     *  word or phrase. In 1951: Any editorial comment.</p>
     */
    public static final Property gloss = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#gloss" );
    
    public static final Property head = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#head" );
    
    /** <p>Indicates that the referenced element is a part of this object</p> */
    public static final Property holonymTerm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#holonymTerm" );
    
    /** <p>A word that is spelled like another, but that has a different pronunciation, 
     *  meaning, and/or origin.Word that is written like another, but that has a different 
     *  pronunciation, meaning, and/or origin.</p>
     */
    public static final Property homograph = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#homograph" );
    
    /** <p>A word that is pronounced like another word and that can be spelled the same 
     *  way (homograph) or can merely sound the same (homophone).Word that sounds 
     *  the same and is written the same as another word but is different in meaning.</p>
     */
    public static final Property homonym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#homonym" );
    
    /** <p>Word that sounds like another word, but is different in writiing or meaning.A 
     *  word that is pronounced in the same way as another word but that is spelled 
     *  differently.</p>
     */
    public static final Property homophone = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#homophone" );
    
    public static final Property hypernym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#hypernym" );
    
    public static final Property hyponym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#hyponym" );
    
    public static final Property imperativeMoodForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#imperativeMoodForm" );
    
    public static final Property imperfectTenseForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#imperfectTenseForm" );
    
    public static final Property indicativeMoodForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#indicativeMoodForm" );
    
    /** <p>An indirect object is a grammatical relation that is one means of expressing 
     *  the semantic role of goal and other similar roles. It is proposed for languages 
     *  in which the role is distinct from the direct object and the oblique object 
     *  on the basis of multiple independent syntactic or morphological criteria, 
     *  such as the following: - Having a particular case marking, commonly dative 
     *  - Governing an agreement affix on the verb, such as person or number - Being 
     *  distinct from oblique relations in that it may be relativized</p>
     */
    public static final Property indirectObject = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#indirectObject" );
    
    public static final Property infinitiveClause = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#infinitiveClause" );
    
    /** <p>A linking element used to identify a relation between an initialism and its 
     *  full or expanded form.</p>
     */
    public static final Property initialismFor = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#initialismFor" );
    
    public static final Property interrogativeClause = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#interrogativeClause" );
    
    public static final Property interrogativeInfinitiveClause = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#interrogativeInfinitiveClause" );
    
    /** <p>Indicates the object is a member of this</p> */
    public static final Property memberHolonym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#memberHolonym" );
    
    /** <p>Indicates this is an element of the other</p> */
    public static final Property memberMeronym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#memberMeronym" );
    
    /** <p>Indicates this is a part of another concept</p> */
    public static final Property meronymTerm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#meronymTerm" );
    
    /** <p>Refers to the prenominal or postnominal positions of determiners which distinguish 
     *  different forms.</p>
     */
    public static final Property modificationType = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#modificationType" );
    
    /** <p>In TEI: contains information about the grammatical mood of verbs (e.g. indicative, 
     *  subjunctive, imperative).</p>
     */
    public static final Property mood = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#mood" );
    
    public static final Property morphosyntacticProperty = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#morphosyntacticProperty" );
    
    /** <p>denotes the negation or the absence</p> */
    public static final Property negative = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#negative" );
    
    public static final Property negativeForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#negativeForm" );
    
    public static final Property nominativeCaseForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#nominativeCaseForm" );
    
    /** <p>A term status qualifier assigned by an authoritative body, such as a standards 
     *  body or a governmental entity with a regulatory function.</p>
     */
    public static final Property normativeAuthorization = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#normativeAuthorization" );
    
    /** <p>A statement that provides further information on any part of a language resource 
     *  entry.</p>
     */
    public static final Property note = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#note" );
    
    /** <p>Grammatical category for the variation in form of nouns, pronouns, and any 
     *  words agreeing with them, depending on how many persons or things are referred 
     *  to.In many languages, the grammatical distinction that indicates the number 
     *  of objects referred to by the term or word.</p>
     */
    public static final Property number = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#number" );
    
    public static final Property object = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#object" );
    
    public static final Property objectComplement = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#objectComplement" );
    
    /** <p>Indicates a part of this object</p> */
    public static final Property partHolonym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#partHolonym" );
    
    /** <p>Indicates this a component of the other concept</p> */
    public static final Property partMeronym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#partMeronym" );
    
    /** <p>A category assigned to a word based on its grammatical and semantic properties.Term 
     *  used to describe how a particular word is used in a sentence.</p>
     */
    public static final Property partOfSpeech = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#partOfSpeech" );
    
    /** <p>Indicates that one lexical entry is the participle form of another, e.g., 
     *  the adjective 'reassuring' is the participle of 'to reassure'</p>
     */
    public static final Property participleFormOf = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#participleFormOf" );
    
    /** <p>A relation between two concepts where one of the concepts constitutes the 
     *  whole and the other concept a part of that whole.</p>
     */
    public static final Property partitiveRelation = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#partitiveRelation" );
    
    public static final Property pastTenseForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#pastTenseForm" );
    
    /** <p>Indication of grammatical person (1st, 2nd, 3rd, etc.) associated with a given 
     *  inflected form.</p>
     */
    public static final Property person = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#person" );
    
    public static final Property pertainsTo = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#pertainsTo" );
    
    public static final Property pluralNumberForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#pluralNumberForm" );
    
    public static final Property positiveDegreeForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#positiveDegreeForm" );
    
    public static final Property positiveForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#positiveForm" );
    
    public static final Property possessiveAdjunct = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#possessiveAdjunct" );
    
    public static final Property possessiveInfinitiveClause = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#possessiveInfinitiveClause" );
    
    /** <p>Indicates an argument of an adjective indicated by post-positive modification. 
     *  An example in english would be that "that is something interesting", where 
     *  the adjective interesting post-postively modifies something</p>
     */
    public static final Property postPositiveArg = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#postPositiveArg" );
    
    public static final Property predicativeAdjective = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#predicativeAdjective" );
    
    public static final Property predicativeAdjunct = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#predicativeAdjunct" );
    
    public static final Property predicativeAdverb = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#predicativeAdverb" );
    
    public static final Property predicativeNominative = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#predicativeNominative" );
    
    public static final Property prepositionalAdjunct = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#prepositionalAdjunct" );
    
    public static final Property prepositionalGerundClause = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#prepositionalGerundClause" );
    
    public static final Property prepositionalInterrogativeClause = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#prepositionalInterrogativeClause" );
    
    public static final Property prepositionalObject = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#prepositionalObject" );
    
    public static final Property presentTenseForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#presentTenseForm" );
    
    /** <p>The representation of the manner by which a term or word is articulated.</p> */
    public static final Property pronunciation = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#pronunciation" );
    
    public static final Property quasiEquivalent = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#quasiEquivalent" );
    
    /** <p>Type of concrete object or concept (the referent) that an expression represents 
     *  (the reference).</p>
     */
    public static final Property referentType = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#referentType" );
    
    /** <p>Classification indicating the relative level of language individually assigned 
     *  to a lexeme or term or to a text type.</p>
     */
    public static final Property register = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#register" );
    
    /** <p>A term connected to another term by a coordinate or associative relation.</p> */
    public static final Property relatedTerm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#relatedTerm" );
    
    /** <p>Transcription or transliteration from non-Latin script into Latin script.</p> */
    public static final Property romanization = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#romanization" );
    
    /** <p>base of a word</p> */
    public static final Property root = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#root" );
    
    public static final Property secondPersonForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#secondPersonForm" );
    
    /** <p>Specification of the pointers in time or sequence that indicates the segmentation 
     *  process.</p>
     */
    public static final Property segmentation = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#segmentation" );
    
    /** <p>Descriptive material that provides a sample of an object or entity defined 
     *  in the entry.</p>
     */
    public static final Property senseExample = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#senseExample" );
    
    public static final Property sententialClause = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#sententialClause" );
    
    /** <p>A linking element used to identify a relation between a short form and its 
     *  full or expanded form.</p>
     */
    public static final Property shortFormFor = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#shortFormFor" );
    
    public static final Property singularNumberForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#singularNumberForm" );
    
    /** <p>relation between a phrase and a verb, that represents the person or thing 
     *  that performs the action or about which something is stated</p>
     */
    public static final Property subject = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#subject" );
    
    public static final Property subjunctiveClause = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#subjunctiveClause" );
    
    public static final Property subjunctiveMoodForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#subjunctiveMoodForm" );
    
    /** <p>Indicates what this is composed of</p> */
    public static final Property substanceHolonym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#substanceHolonym" );
    
    /** <p>Indicates this is a substance that composes the other</p> */
    public static final Property substanceMeronym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#substanceMeronym" );
    
    public static final Property superlativeAdjunct = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#superlativeAdjunct" );
    
    public static final Property superlativeDegreeForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#superlativeDegreeForm" );
    
    public static final Property synonym = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#synonym" );
    
    /** <p>An attribution of a term or lexeme with respect to its use over time.</p> */
    public static final Property temporalQualifier = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#temporalQualifier" );
    
    /** <p>Property referring to the way the grammar marks the time at which the action 
     *  denoted by the verb took place.</p>
     */
    public static final Property tense = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#tense" );
    
    /** <p>Any logically significant portion of a larger term or lexeme.</p> */
    public static final Property termElement = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#termElement" );
    
    /** <p>An attribute assigned to a lexeme or a term.</p> */
    public static final Property termType = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#termType" );
    
    public static final Property thirdPersonForm = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#thirdPersonForm" );
    
    public static final Property translation = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#translation" );
    
    /** <p>Form resulting from the conversion of one writing system into another</p> */
    public static final Property transliteration = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#transliteration" );
    
    /** <p>A note containing information on the usage of the associated word or term.</p> */
    public static final Property usageNote = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#usageNote" );
    
    /** <p>One of a set of distinctive forms that are used to signal modality. Modality 
     *  is a facet of illocutionary point or general intent of a speaker, or a speaker's 
     *  degree of commitment to the expressed proposition's believability, obligatoriness, 
     *  desirability or reality.</p>
     */
    public static final Property verbFormMood = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#verbFormMood" );
    
    /** <p>Way sentences may alter the relationship between the subject and object of 
     *  a verb, without changing the meaning of the sentence.</p>
     */
    public static final Property voice = m_model.createProperty( "http://www.lexinfo.net/ontology/2.0/lexinfo#voice" );
    
    public static final Resource AbbreviatedForm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AbbreviatedForm" );
    
    public static final Resource AccusativePostPositiveArgument = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AccusativePostPositiveArgument" );
    
    public static final Resource AdjectivalComplementFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectivalComplementFrame" );
    
    public static final Resource Adjective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Adjective" );
    
    public static final Resource AdjectiveAccusativePostPositiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectiveAccusativePostPositiveFrame" );
    
    public static final Resource AdjectiveAttributiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectiveAttributiveFrame" );
    
    public static final Resource AdjectiveComparativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectiveComparativeFrame" );
    
    public static final Resource AdjectiveDativePostPositiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectiveDativePostPositiveFrame" );
    
    public static final Resource AdjectiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectiveFrame" );
    
    public static final Resource AdjectiveGenitivePostPositiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectiveGenitivePostPositiveFrame" );
    
    public static final Resource AdjectiveImpersonalFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectiveImpersonalFrame" );
    
    public static final Resource AdjectivePOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectivePOS" );
    
    public static final Resource AdjectivePPFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectivePPFrame" );
    
    public static final Resource AdjectivePhrase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectivePhrase" );
    
    public static final Resource AdjectivePostPositiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectivePostPositiveFrame" );
    
    /** <p>Note this frame should be used when both attributive and predicative use of 
     *  the adjective is allowed</p>
     */
    public static final Resource AdjectivePredicateFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectivePredicateFrame" );
    
    public static final Resource AdjectivePredicativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectivePredicativeFrame" );
    
    public static final Resource AdjectiveScaleFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectiveScaleFrame" );
    
    public static final Resource AdjectiveSuperlativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdjectiveSuperlativeFrame" );
    
    public static final Resource Adjunct = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Adjunct" );
    
    public static final Resource Adposition = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Adposition" );
    
    public static final Resource AdpositionPOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdpositionPOS" );
    
    public static final Resource AdpositionalObject = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdpositionalObject" );
    
    public static final Resource Adverb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Adverb" );
    
    public static final Resource AdverbPOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdverbPOS" );
    
    public static final Resource AdverbialComplementFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AdverbialComplementFrame" );
    
    public static final Resource Affix = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Affix" );
    
    public static final Resource Animacy = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Animacy" );
    
    /** <p>Indicates either the subject or object of the main clause may be the omitted 
     *  argument of the subclause</p>
     */
    public static final Resource ArbitraryControl = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ArbitraryControl" );
    
    public static final Resource Article = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Article" );
    
    public static final Resource ArticlePOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ArticlePOS" );
    
    public static final Resource Aspect = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Aspect" );
    
    public static final Resource AttributiveArgument = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#AttributiveArgument" );
    
    public static final Resource Case = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Case" );
    
    public static final Resource ClausalArgument = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ClausalArgument" );
    
    public static final Resource Cliticness = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Cliticness" );
    
    public static final Resource CommonNoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#CommonNoun" );
    
    public static final Resource ComparativeAdjunct = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ComparativeAdjunct" );
    
    public static final Resource Complement = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Complement" );
    
    public static final Resource Conjunction = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Conjunction" );
    
    public static final Resource ConjunctionPOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ConjunctionPOS" );
    
    /** <p>Control indicates how a an argument from a main clause will be utilized in 
     *  a subclause. This class includes both control structures and raising structures</p>
     */
    public static final Resource Control = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Control" );
    
    public static final Resource Dating = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Dating" );
    
    public static final Resource DativePostPositiveArgument = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#DativePostPositiveArgument" );
    
    public static final Resource DativeTransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#DativeTransitiveFrame" );
    
    /** <p>A clause beginning with the declarative conjunction ("that" in English)</p> */
    public static final Resource DeclarativeClause = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#DeclarativeClause" );
    
    /** <p>Declarative frames take a clause as an argument, this argument is marker with 
     *  the declarative conjunction ("that" in English)</p>
     */
    public static final Resource DeclarativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#DeclarativeFrame" );
    
    public static final Resource Definiteness = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Definiteness" );
    
    public static final Resource Degree = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Degree" );
    
    public static final Resource Determiner = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Determiner" );
    
    public static final Resource DeterminerPOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#DeterminerPOS" );
    
    public static final Resource DirectObject = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#DirectObject" );
    
    public static final Resource DitransitiveDoubleAccusativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#DitransitiveDoubleAccusativeFrame" );
    
    public static final Resource DitransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#DitransitiveFrame" );
    
    public static final Resource DitransitiveFrame_For = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#DitransitiveFrame_For" );
    
    public static final Resource DitransitiveFrame_To = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#DitransitiveFrame_To" );
    
    public static final Resource Finiteness = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Finiteness" );
    
    public static final Resource Frequency = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Frequency" );
    
    /** <p>A word that is a fusion of a preposition and some other word... examples include 
     *  the German words "zum" and "daran"</p>
     */
    public static final Resource FusedPreposition = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#FusedPreposition" );
    
    public static final Resource FusedPrepositionPOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#FusedPrepositionPOS" );
    
    public static final Resource Gender = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Gender" );
    
    public static final Resource GenitiveDitransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#GenitiveDitransitiveFrame" );
    
    public static final Resource GenitiveObject = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#GenitiveObject" );
    
    public static final Resource GenitivePostPositiveArgument = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#GenitivePostPositiveArgument" );
    
    public static final Resource GenitiveTransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#GenitiveTransitiveFrame" );
    
    /** <p>A clause, whose head is a non-finite verb form, which is used in place of 
     *  an argument. In English these use the "-ing" suffix</p>
     */
    public static final Resource Gerund = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Gerund" );
    
    public static final Resource GerundACFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#GerundACFrame" );
    
    /** <p>Indicates one of the arguments is a gerund clause</p> */
    public static final Resource GerundFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#GerundFrame" );
    
    public static final Resource GerundOCFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#GerundOCFrame" );
    
    public static final Resource GerundSCFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#GerundSCFrame" );
    
    public static final Resource ImpersonalFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ImpersonalFrame" );
    
    public static final Resource ImpersonalIntransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ImpersonalIntransitiveFrame" );
    
    public static final Resource ImpersonalIntransitivePPFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ImpersonalIntransitivePPFrame" );
    
    public static final Resource ImpersonalTransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ImpersonalTransitiveFrame" );
    
    public static final Resource IndirectObject = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IndirectObject" );
    
    /** <p>A clause whose main verb is infinitive</p> */
    public static final Resource InfinitiveClause = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#InfinitiveClause" );
    
    /** <p>Infinitive frames take an infinitive clause as an argument</p> */
    public static final Resource InfinitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#InfinitiveFrame" );
    
    public static final Resource Infix = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Infix" );
    
    public static final Resource Interjection = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Interjection" );
    
    /** <p>A subclause that begins interrogative construction ("wh"-word in English)</p> */
    public static final Resource InterrogativeClause = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#InterrogativeClause" );
    
    /** <p>Indicates the frame has a subframe indicated with the appropriate interrogative 
     *  (e.g., "who", "where", "how")</p>
     */
    public static final Resource InterrogativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#InterrogativeFrame" );
    
    /** <p>Indicates the frame has an argument that is a clause with both an interrogative 
     *  and the clause is in the infinitive form</p>
     */
    public static final Resource InterrogativeInfinitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#InterrogativeInfinitiveFrame" );
    
    public static final Resource IntransitiveAdjectivalComplementFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveAdjectivalComplementFrame" );
    
    public static final Resource IntransitiveAdverbialComplementFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveAdverbialComplementFrame" );
    
    public static final Resource IntransitiveDeclarativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveDeclarativeFrame" );
    
    public static final Resource IntransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveFrame" );
    
    public static final Resource IntransitiveInfinitiveACFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveInfinitiveACFrame" );
    
    public static final Resource IntransitiveInfinitiveRSFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveInfinitiveRSFrame" );
    
    public static final Resource IntransitiveInfinitiveSCFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveInfinitiveSCFrame" );
    
    /** <p>he ASKED [what he should do]</p> */
    public static final Resource IntransitiveInterrogativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveInterrogativeFrame" );
    
    public static final Resource IntransitiveInterrogativeInfinitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveInterrogativeInfinitiveFrame" );
    
    public static final Resource IntransitiveNominalComplementFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveNominalComplementFrame" );
    
    public static final Resource IntransitivePPDeclarativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitivePPDeclarativeFrame" );
    
    public static final Resource IntransitivePPFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitivePPFrame" );
    
    public static final Resource IntransitiveSententialFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#IntransitiveSententialFrame" );
    
    public static final Resource ModificationType = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ModificationType" );
    
    public static final Resource Mood = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Mood" );
    
    public static final Resource MorphosyntacticProperty = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#MorphosyntacticProperty" );
    
    public static final Resource Negative = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Negative" );
    
    public static final Resource NominalComplementFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#NominalComplementFrame" );
    
    public static final Resource NormativeAuthorization = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#NormativeAuthorization" );
    
    public static final Resource Noun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Noun" );
    
    public static final Resource NounFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#NounFrame" );
    
    public static final Resource NounPOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#NounPOS" );
    
    public static final Resource NounPPFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#NounPPFrame" );
    
    public static final Resource NounPhrase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#NounPhrase" );
    
    public static final Resource NounPossessiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#NounPossessiveFrame" );
    
    public static final Resource NounPredicateFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#NounPredicateFrame" );
    
    public static final Resource Number = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Number" );
    
    public static final Resource Numeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Numeral" );
    
    public static final Resource NumeralPOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#NumeralPOS" );
    
    public static final Resource Object = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Object" );
    
    public static final Resource ObjectComplement = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ObjectComplement" );
    
    /** <p>Indicates the object of the main clause is also the (omitted) object of the 
     *  subclause</p>
     */
    public static final Resource ObjectControl = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ObjectControl" );
    
    public static final Resource PPFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PPFrame" );
    
    public static final Resource PartOfSpeech = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PartOfSpeech" );
    
    public static final Resource Particle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Particle" );
    
    public static final Resource ParticlePOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ParticlePOS" );
    
    public static final Resource Person = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Person" );
    
    public static final Resource PossessiveAdjunct = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PossessiveAdjunct" );
    
    public static final Resource PostPositiveArgument = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PostPositiveArgument" );
    
    public static final Resource Postposition = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Postposition" );
    
    public static final Resource PredicativeAdjective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PredicativeAdjective" );
    
    public static final Resource PredicativeAdverb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PredicativeAdverb" );
    
    public static final Resource PredicativeNominative = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PredicativeNominative" );
    
    public static final Resource Prefix = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Prefix" );
    
    public static final Resource Preposition = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Preposition" );
    
    public static final Resource PrepositionFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PrepositionFrame" );
    
    public static final Resource PrepositionPhrase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PrepositionPhrase" );
    
    public static final Resource PrepositionalAdjunct = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PrepositionalAdjunct" );
    
    /** <p>Abstract frame for words that take a prepositional phrase as an argument</p> */
    public static final Resource PrepositionalFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PrepositionalFrame" );
    
    public static final Resource PrepositionalInterrogativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PrepositionalInterrogativeFrame" );
    
    public static final Resource PrepositionalObject = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PrepositionalObject" );
    
    public static final Resource PrepositionalPhraseFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PrepositionalPhraseFrame" );
    
    public static final Resource Pronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Pronoun" );
    
    public static final Resource PronounPOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#PronounPOS" );
    
    public static final Resource ProperNoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ProperNoun" );
    
    public static final Resource RaisableSubject = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#RaisableSubject" );
    
    /** <p>Indicates the syntactic subject of the main clause is in fact the subject 
     *  of the subclause. The main clause should then be interpreted as being impersonal.</p>
     */
    public static final Resource RaisingSubject = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#RaisingSubject" );
    
    public static final Resource ReciprocalFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ReciprocalFrame" );
    
    public static final Resource ReferentType = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ReferentType" );
    
    /** <p>ist diese frame echt?</p> */
    public static final Resource ReflexiveDativeTransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ReflexiveDativeTransitiveFrame" );
    
    public static final Resource ReflexiveDitransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ReflexiveDitransitiveFrame" );
    
    public static final Resource ReflexiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ReflexiveFrame" );
    
    public static final Resource ReflexiveObject = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ReflexiveObject" );
    
    public static final Resource ReflexiveReciprocalFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ReflexiveReciprocalFrame" );
    
    public static final Resource ReflexiveTransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ReflexiveTransitiveFrame" );
    
    public static final Resource ReflexiveTransitivePPFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ReflexiveTransitivePPFrame" );
    
    public static final Resource Register = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Register" );
    
    /** <p>Sentential frames take a clause as argument, no conjunction is used and the 
     *  syntax of the clause is the same as a main clause</p>
     */
    public static final Resource SententialFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#SententialFrame" );
    
    public static final Resource Subject = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Subject" );
    
    /** <p>Indicates the subject of the main clause is the (omitted) subject of the subclause</p> */
    public static final Resource SubjectControl = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#SubjectControl" );
    
    public static final Resource SubjectlessFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#SubjectlessFrame" );
    
    public static final Resource SubjectlessIntransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#SubjectlessIntransitiveFrame" );
    
    public static final Resource SubjectlessIntransitivePPFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#SubjectlessIntransitivePPFrame" );
    
    public static final Resource SubjectlessTransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#SubjectlessTransitiveFrame" );
    
    public static final Resource SubjectlessTransitivePPFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#SubjectlessTransitivePPFrame" );
    
    /** <p>A subclause that is in the subjunctive mood</p> */
    public static final Resource SubjunctiveClause = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#SubjunctiveClause" );
    
    public static final Resource Suffix = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Suffix" );
    
    public static final Resource SuperlativeAdjunct = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#SuperlativeAdjunct" );
    
    public static final Resource Symbol = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Symbol" );
    
    public static final Resource SymbolPOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#SymbolPOS" );
    
    public static final Resource TemporalQualifier = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TemporalQualifier" );
    
    public static final Resource Tense = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Tense" );
    
    public static final Resource TermElement = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TermElement" );
    
    public static final Resource TermType = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TermType" );
    
    public static final Resource TransitiveAdjectivalComplementFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveAdjectivalComplementFrame" );
    
    public static final Resource TransitiveAdverbialComplementFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveAdverbialComplementFrame" );
    
    public static final Resource TransitiveDeclarativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveDeclarativeFrame" );
    
    public static final Resource TransitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveFrame" );
    
    public static final Resource TransitiveInfinitiveACFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveInfinitiveACFrame" );
    
    public static final Resource TransitiveInfinitiveOCFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveInfinitiveOCFrame" );
    
    public static final Resource TransitiveInfinitiveSCFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveInfinitiveSCFrame" );
    
    public static final Resource TransitiveInterrogativeFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveInterrogativeFrame" );
    
    public static final Resource TransitiveInterrogativeInfinitiveFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveInterrogativeInfinitiveFrame" );
    
    public static final Resource TransitiveNominalComplementFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveNominalComplementFrame" );
    
    public static final Resource TransitivePPFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitivePPFrame" );
    
    public static final Resource TransitiveSententialFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#TransitiveSententialFrame" );
    
    public static final Resource Verb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Verb" );
    
    public static final Resource VerbFormMood = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#VerbFormMood" );
    
    public static final Resource VerbFrame = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#VerbFrame" );
    
    public static final Resource VerbPOS = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#VerbPOS" );
    
    public static final Resource VerbPhrase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#VerbPhrase" );
    
    public static final Resource Voice = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#Voice" );
    
    /** <p>A lexical unit in a CJKV language that is represented by at least two CJKV 
     *  characters.</p>
     */
    public static final Resource CJK_compound = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#CJK_compound" );
    
    /** <p>A term or lexeme resulting from the omission of any part of the full term 
     *  or lexeme while designating the same concept.</p>
     */
    public static final Resource abbreviatedForm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#abbreviatedForm" );
    
    public static final Resource abbreviation = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#abbreviation" );
    
    /** <p>Case that expresses the lack or absence of the referent of the noun it marks.</p> */
    public static final Resource abessiveCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#abessiveCase" );
    
    /** <p>Case used to typically indicate locative or instrumental function.</p> */
    public static final Resource ablativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ablativeCase" );
    
    /** <p>Case for nouns in ergative-absolute languages that would generally be the 
     *  subjects of intransitive verbs or the objects of transitive verbs in the translational 
     *  equivalents of nominative-accusative languages such as English.</p>
     */
    public static final Resource absolutiveCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#absolutiveCase" );
    
    /** <p>Case used to indicate direct object.</p> */
    public static final Resource accusativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#accusativeCase" );
    
    /** <p>An abbreviation made up of the initial letters of the components of the full 
     *  form of the designation or from syllables of the full form and pronounced 
     *  syllabically.</p>
     */
    public static final Resource acronym = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#acronym" );
    
    /** <p>Value that expresses the situation where the grammatical subject is also the 
     *  semantic actor of the verb.</p>
     */
    public static final Resource activeVoice = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#activeVoice" );
    
    /** <p>Case which expresses the meaning of presence 'at' or 'near' a place.</p> */
    public static final Resource adessiveCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#adessiveCase" );
    
    /** <p>Case expressing &amp;quot;to&amp;quot; in Basque studies.</p> */
    public static final Resource aditiveCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#aditiveCase" );
    
    /** <p>Part of speech related to attributes of noun.</p> */
    public static final Resource adjective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#adjective" );
    
    /** <p>Deverbal adjective in Japanese ending with the '-i' suffix in dictionary form</p> */
    public static final Resource adjective_i = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#adjective-i" );
    
    /** <p>Denominal adjectives in Japanese formed from a noun plus the particle 'na'</p> */
    public static final Resource adjective_na = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#adjective-na" );
    
    /** <p>A term rated according to the scale of a term acceptability rating as a synonym 
     *  for a preferred term.</p>
     */
    public static final Resource admittedTerm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#admittedTerm" );
    
    /** <p>Part of speech that occurs before/inside/after a complement composed of a 
     *  noun phrase, noun, pronoun or clause that functions as a noun phrase and form 
     *  a single structure with the complement to express its grammatical and semantic 
     *  relation to another unit.</p>
     */
    public static final Resource adposition = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#adposition" );
    
    /** <p>Part of speech to refer to an heterogeneous group of words whose most frequent 
     *  function is to specify the mode of action of the verb.</p>
     */
    public static final Resource adverb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#adverb" );
    
    /** <p>()</p> */
    public static final Resource adverbialPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#adverbialPronoun" );
    
    /** <p>Particle used to express affirmation.</p> */
    public static final Resource affirmativeParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#affirmativeParticle" );
    
    public static final Resource affix = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#affix" );
    
    /** <p>Personnal pronoun that is affixed, i.e. added as an affix to another word.</p> */
    public static final Resource affixedPersonalPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#affixedPersonalPronoun" );
    
    /** <p>Case which expresses the meaning of motion 'to' or 'towards' the referent 
     *  it marks.</p>
     */
    public static final Resource allativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#allativeCase" );
    
    /** <p>Pronoun that refers to something characterized by allusions.</p> */
    public static final Resource allusivePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#allusivePronoun" );
    
    /** <p>Perceived as alive.</p> */
    public static final Resource animate = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#animate" );
    
    /** <p>A designation that represents an individual concept.</p> */
    public static final Resource appellation = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#appellation" );
    
    /** <p>A term or lexeme no longer in ordinary use, though retained for special purposes.</p> */
    public static final Resource archaicForm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#archaicForm" );
    
    /** <p>...Term used in the grammatical classification of words referring to a subclass 
     *  of determiners which displays a primary role in differentiating the uses of 
     *  nouns.</p>
     */
    public static final Resource article = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#article" );
    
    /** <p>The root form of a word or term that is used as the formal dictionary entry 
     *  for the term.</p>
     */
    public static final Resource baseElement = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#baseElement" );
    
    /** <p>Register of terms used in applications-oriented as opposed to theoretical 
     *  or academic levels of language.The register of terms used in applications-oriented 
     *  as opposed to theoretical or academic levels of language.</p>
     */
    public static final Resource benchLevelRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#benchLevelRegister" );
    
    /** <p>Case that expresses that the referent of the noun it marks receives the benefit 
     *  of the situation expressed by the clause.</p>
     */
    public static final Resource benefactiveCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#benefactiveCase" );
    
    /** <p>Linked to a particular element.</p> */
    public static final Resource bound = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#bound" );
    
    /** <p>Sign used to mark an item in a list.</p> */
    public static final Resource bullet = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#bullet" );
    
    /** <p>A word denoting a number.</p> */
    public static final Resource cardinalNumeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#cardinalNumeral" );
    
    /** <p>Case which expresses that the referent of the noun it marks is the cause of 
     *  the situation expressed by the clause.</p>
     */
    public static final Resource causativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#causativeCase" );
    
    /** <p>Aspect that expresses the cessation of an event or state.</p> */
    public static final Resource cessative = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#cessative" );
    
    /** <p>Adposition which consists of two parts which are positioned ahead and after 
     *  the adpositional foci.</p>
     */
    public static final Resource circumposition = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#circumposition" );
    
    /** <p>An abbreviation formed by truncating a part of a simple term.</p> */
    public static final Resource clippedTerm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#clippedTerm" );
    
    /** <p>End of a parenthesis pair.</p> */
    public static final Resource closeParenthesis = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#closeParenthesis" );
    
    /** <p>A collective number is a number referring to 'a set of things'. Languages 
     *  that have this feature can use it to get a phrase like 'flock of sheeps' by 
     *  using 'sheep' in collective number.</p>
     */
    public static final Resource collective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#collective" );
    
    /** <p>A pronoun that refers to all elements of a set.</p> */
    public static final Resource collectivePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#collectivePronoun" );
    
    /** <p>Sign with two vertical points that is used in writing and printing to introduce 
     *  an explanation, example or quotation.</p>
     */
    public static final Resource colon = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#colon" );
    
    /** <p>Case which expresses a meaning similar to 'along with' or 'accompagnied by'.</p> */
    public static final Resource comitativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#comitativeCase" );
    
    /** <p>Mark (,) used in writing to show a short pause or to separate items in a list.</p> */
    public static final Resource comma = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#comma" );
    
    /** <p>Indistinguished gender for epicenes.</p> */
    public static final Resource commonGender = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#commonGender" );
    
    /** <p>A synonym for an international scientific term that is used in general discourse 
     *  in a given language.</p>
     */
    public static final Resource commonName = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#commonName" );
    
    /** <p>Noun that signifies a non-specific member of a group.A noun or adjective denoting 
     *  a class of objects.</p>
     */
    public static final Resource commonNoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#commonNoun" );
    
    /** <p>Said of a term that appears frequently.</p> */
    public static final Resource commonlyUsed = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#commonlyUsed" );
    
    /** <p>Comparative is the comparison where only two entites are involved.</p> */
    public static final Resource comparative = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#comparative" );
    
    /** <p>Particle used to compare.</p> */
    public static final Resource comparativeParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#comparativeParticle" );
    
    /** <p>A lexical unit that combines two or sometimes more different words, frequently 
     *  such that the sense of the new lexical unit is not clearly derivable from 
     *  the combination of its parts.</p>
     */
    public static final Resource compound = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#compound" );
    
    /** <p>Preposition that is a aggregation of words</p> */
    public static final Resource compoundPreposition = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#compoundPreposition" );
    
    /** <p>A conditional relation is a logical relation in which the illocutionary act 
     *  employing one of a pair of propositions is expressed or implied to be true 
     *  or in force if the other proposition is true.</p>
     */
    public static final Resource conditional = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#conditional" );
    
    /** <p>conditional particule</p> */
    public static final Resource conditionalParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#conditionalParticle" );
    
    /** <p>conditional pronoun</p> */
    public static final Resource conditionalPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#conditionalPronoun" );
    
    /** <p>Word that syntactically links words or constituents, and expresses a semantic 
     *  relationship between them.</p>
     */
    public static final Resource conjunction = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#conjunction" );
    
    /** <p>A lexical unit formed by a shortening of a word, syllable, or word group by 
     *  omission of a sound or letter.</p>
     */
    public static final Resource contraction = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#contraction" );
    
    /** <p>Conjunction that links constituents.</p> */
    public static final Resource coordinatingConjunction = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#coordinatingConjunction" );
    
    /** <p>particle for coordination</p> */
    public static final Resource coordinationParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#coordinationParticle" );
    
    /** <p>Special word that combines the subject of a sentence and its description.</p> */
    public static final Resource copula = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#copula" );
    
    /** <p>Case that expresses an indirect object relationship or a range of meaning 
     *  similar to that covered by 'to' or 'for' in English; but there is a great 
     *  deal of variation between languages in the way this case is used.</p>
     */
    public static final Resource dativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#dativeCase" );
    
    /** <p>verb lacking certain morphosyntactic properties</p> */
    public static final Resource deficientVerb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#deficientVerb" );
    
    /** <p>Value referring to the capacity of identification of an entity.</p> */
    public static final Resource definite = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#definite" );
    
    /** <p>Article that allows the reference to a specific, identifiable entity (or class 
     *  of entities).</p>
     */
    public static final Resource definiteArticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#definiteArticle" );
    
    /** <p>Case which expresses motion downward from the referent of the noun it marks.</p> */
    public static final Resource delativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#delativeCase" );
    
    /** <p>Determiner used to point to an entity in the situation or elsewhere in a sentence.</p> */
    public static final Resource demonstrativeDeterminer = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#demonstrativeDeterminer" );
    
    /** <p>Pronoun used to point to an entity in the situation or elsewhere in a sentence.</p> */
    public static final Resource demonstrativePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#demonstrativePronoun" );
    
    /** <p>A term rated according to the scale of a term acceptability rating as undesired.</p> */
    public static final Resource deprecatedTerm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#deprecatedTerm" );
    
    /** <p>Word or affix that belongs to a class of noun modifiers that expresses the 
     *  reference, including quantity, of a noun.</p>
     */
    public static final Resource determiner = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#determiner" );
    
    public static final Resource dialectRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#dialectRegister" );
    
    /** <p>diminutive noun</p> */
    public static final Resource diminutiveNoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#diminutiveNoun" );
    
    /** <p>distinctive particle</p> */
    public static final Resource distinctiveParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#distinctiveParticle" );
    
    /** <p>Form used in some languages to designate two persons or things.The form used 
     *  in some languages to designate two persons or things.</p>
     */
    public static final Resource dual = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#dual" );
    
    /** <p>Case which expresses the meaning of motion 'away from' from the referent of 
     *  the noun it marks.</p>
     */
    public static final Resource elativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#elativeCase" );
    
    /** <p>An emphatic pronoun is a personal pronoun that is used to emphasize its referent.</p> */
    public static final Resource emphaticPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#emphaticPronoun" );
    
    /** <p>A term that heads a terminological entry.</p> */
    public static final Resource entryTerm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#entryTerm" );
    
    /** <p>An expression used to represent a concept based on a statement that two mathematical 
     *  expressions are, for instance, equal as identified by the equal sign (=), 
     *  or assigned to one another by a similar sign.</p>
     */
    public static final Resource equation = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#equation" );
    
    /** <p>Case that expresses likeness or identity to the referent of the noun it marks. 
     *  It can have meaning, such as: 'as', 'like', or 'in the capacity of'.</p>
     */
    public static final Resource equativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#equativeCase" );
    
    /** <p>Case assigned to the subject of a transitive verb as opposed to absolutive 
     *  case.</p>
     */
    public static final Resource ergativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ergativeCase" );
    
    /** <p>Case which expresses a state of being.</p> */
    public static final Resource essiveCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#essiveCase" );
    
    /** <p>Determiner expressing an emotional utterance and marked with a strong intonation.</p> */
    public static final Resource exclamativeDeterminer = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#exclamativeDeterminer" );
    
    /** <p>Special sign (!) usually used in writing to mark exclamation.</p> */
    public static final Resource exclamativePoint = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#exclamativePoint" );
    
    /** <p>Pronoun marked with an emotional utterance and/or a strong intonation.</p> */
    public static final Resource exclamativePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#exclamativePronoun" );
    
    /** <p>pronoun that indicates the existence of something or someone</p> */
    public static final Resource existentialPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#existentialPronoun" );
    
    /** <p>A significant word or phrase.</p> */
    public static final Resource expression = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#expression" );
    
    public static final Resource facetiousRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#facetiousRegister" );
    
    /** <p>Of, relating to, or constituting the gender that ordinarily includes most 
     *  words or grammatical forms referring to females.</p>
     */
    public static final Resource feminine = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#feminine" );
    
    /** <p>Property applied to a verb form that can occur on its own in an independent 
     *  sentence.</p>
     */
    public static final Resource finite = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#finite" );
    
    /** <p>First person deixis is deictic reference that refers to the speaker, or both 
     *  the speaker and referents grouped with the speaker</p>
     */
    public static final Resource firstPerson = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#firstPerson" );
    
    public static final Resource formalRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#formalRegister" );
    
    /** <p>Figures, symbols or the like used to express a concept briefly, such as a 
     *  mathematical or chemical formula.</p>
     */
    public static final Resource formula = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#formula" );
    
    /** <p>For definiteness, when a specific form is the syntactic subject of the clause.</p> */
    public static final Resource fullArticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#fullArticle" );
    
    /** <p>The complete presentation of a term or lexeme for which there is an abbreviated 
     *  form.</p>
     */
    public static final Resource fullForm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#fullForm" );
    
    /** <p>Preposition that is the result of a morphological merge from at least two 
     *  words.</p>
     */
    public static final Resource fusedPreposition = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#fusedPreposition" );
    
    /** <p>word resulting from the aggregation of a proposition and a determiner</p> */
    public static final Resource fusedPrepositionDeterminer = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#fusedPrepositionDeterminer" );
    
    /** <p>word resulting from the aggregation of a preposition and a pronoun</p> */
    public static final Resource fusedPrepositionPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#fusedPrepositionPronoun" );
    
    /** <p>word resulting from the aggregation of a pronoun and an auxiliary</p> */
    public static final Resource fusedPronounAuxiliary = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#fusedPronounAuxiliary" );
    
    /** <p>Verb tense that indicates action or state of being in the future.</p> */
    public static final Resource future = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#future" );
    
    /** <p>Particle used in order to express future.</p> */
    public static final Resource futureParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#futureParticle" );
    
    /** <p>Adverb belonging to the general class of adverbs</p> */
    public static final Resource generalAdverb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#generalAdverb" );
    
    /** <p>A word that does not carry its own meaning but generalizes the meaning of 
     *  a neighboring word, adding the &amp;quot;etc.&amp;quot; sense.</p>
     */
    public static final Resource generalizationWord = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#generalizationWord" );
    
    /** <p>A numeral used to indicate the number of sets/kinds of objects.</p> */
    public static final Resource genericNumeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#genericNumeral" );
    
    /** <p>Case which expresses a possessive relationship (e.g. the boy's book) or some 
     *  other similarly close connection (e.g. a summer's day).</p>
     */
    public static final Resource genitiveCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#genitiveCase" );
    
    public static final Resource gerundive = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#gerundive" );
    
    /** <p>A group of words in a fixed order that have a particular meaning that is different 
     *  from the meanings of each word understood on its own.</p>
     */
    public static final Resource idiom = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#idiom" );
    
    /** <p>Case which expresses the meaning of 'motion into' or 'direction towards' the 
     *  referent of the noun it marks.</p>
     */
    public static final Resource illativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#illativeCase" );
    
    /** <p>...Mood used to express an order.</p> */
    public static final Resource imperative = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#imperative" );
    
    /** <p>Verb tense that refers to action in the past that is incomplete or ongoing.</p> */
    public static final Resource imperfect = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#imperfect" );
    
    /** <p>Imperfective aspect is an aspect that expresses an event or state, with respect 
     *  to its internal structure, instead of expressing it as a simple whole.</p>
     */
    public static final Resource imperfective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#imperfective" );
    
    /** <p>Pronoun lacking person referent.</p> */
    public static final Resource impersonalPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#impersonalPronoun" );
    
    /** <p>Register of terms that are company-specific and not readily recognized outside 
     *  this environment.The register of terms that are company-specific and not readily 
     *  recognized outside this environment.</p>
     */
    public static final Resource inHouseRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#inHouseRegister" );
    
    /** <p>Perceived as not living.</p> */
    public static final Resource inanimate = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#inanimate" );
    
    /** <p>Aspect that expresses the beginning of an event or state.</p> */
    public static final Resource inchoative = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#inchoative" );
    
    /** <p>Value related to an entity in a situation where the identification of this 
     *  entity is not clear cut.</p>
     */
    public static final Resource indefinite = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#indefinite" );
    
    /** <p>Article not capable of expressing identification.</p> */
    public static final Resource indefiniteArticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#indefiniteArticle" );
    
    /** <p>A word used to express imprecise quantity.</p> */
    public static final Resource indefiniteCardinalNumeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#indefiniteCardinalNumeral" );
    
    /** <p>Determiner not capable of identification.</p> */
    public static final Resource indefiniteDeterminer = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#indefiniteDeterminer" );
    
    /** <p>A word indicating imprecise number of times something happened.</p> */
    public static final Resource indefiniteMultiplicativeNumeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#indefiniteMultiplicativeNumeral" );
    
    /** <p>A word used to indicate imprecise rank of an object in a sequence.</p> */
    public static final Resource indefiniteOrdinalNumeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#indefiniteOrdinalNumeral" );
    
    /** <p>Pronoun that does not allow reference.</p> */
    public static final Resource indefinitePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#indefinitePronoun" );
    
    /** <p>...Mood value used in the expression of statements and questions.</p> */
    public static final Resource indicative = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#indicative" );
    
    /** <p>Markup to express that there is not any pertinence.</p> */
    public static final Resource indifferent = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#indifferent" );
    
    /** <p>Case which expresses the meaning of location or position within a place.</p> */
    public static final Resource inessiveCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#inessiveCase" );
    
    /** <p>Mood cited as unmarked or base form.</p> */
    public static final Resource infinitive = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#infinitive" );
    
    /** <p>Particle used to express infinitive.</p> */
    public static final Resource infinitiveParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#infinitiveParticle" );
    
    public static final Resource infix = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#infix" );
    
    /** <p>An element of language used to change the form of a word (noun, adjective) 
     *  by declension, and (verbs) by conjugation.</p>
     */
    public static final Resource inflectionElement = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#inflectionElement" );
    
    /** <p>Said of a term that does not appear frequently.</p> */
    public static final Resource infrequentlyUsed = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#infrequentlyUsed" );
    
    /** <p>An abbreviation made up of the initial letters of the components of the full 
     *  form of the designation or from syllables of the full form and pronounced 
     *  letter by letter.</p>
     */
    public static final Resource initialism = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#initialism" );
    
    /** <p>Case indicating that the referent of the noun it marks is the means of the 
     *  accomplishment of the action expressed by the clause.</p>
     */
    public static final Resource instrumentalCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#instrumentalCase" );
    
    /** <p>Word or sound that expresses an emotion.</p> */
    public static final Resource interjection = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#interjection" );
    
    /** <p>A term that is part of an international scientific nomenclature as adopted 
     *  by an appropriate scientific body.</p>
     */
    public static final Resource internationalScientificTerm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#internationalScientificTerm" );
    
    /** <p>A term that has the same or nearly identical orthographic or phonemic form 
     *  in many languages.</p>
     */
    public static final Resource internationalism = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#internationalism" );
    
    /** <p>An interrogative/relative word used to ask about quantity.</p> */
    public static final Resource interrogativeCardinalNumeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#interrogativeCardinalNumeral" );
    
    /** <p>Determiner used to express a question.</p> */
    public static final Resource interrogativeDeterminer = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#interrogativeDeterminer" );
    
    /** <p>An interrogative/relative word used to ask about the number of times something 
     *  happened.</p>
     */
    public static final Resource interrogativeMultiplicativeNumeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#interrogativeMultiplicativeNumeral" );
    
    /** <p>An interrogative/relative word used to ask about numeric ranking.</p> */
    public static final Resource interrogativeOrdinalNumeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#interrogativeOrdinalNumeral" );
    
    /** <p>Particle used to express a question.</p> */
    public static final Resource interrogativeParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#interrogativeParticle" );
    
    /** <p>Pronoun used to express a question.</p> */
    public static final Resource interrogativePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#interrogativePronoun" );
    
    /** <p>pronoun which may act as a relative pronoun or an interrogative one</p> */
    public static final Resource interrogativeRelativePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#interrogativeRelativePronoun" );
    
    /** <p>Inverted comma.</p> */
    public static final Resource invertedComma = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#invertedComma" );
    
    public static final Resource ironicRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ironicRegister" );
    
    /** <p>personal pronoun which is not reflexive</p> */
    public static final Resource irreflexivePersonalPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#irreflexivePersonalPronoun" );
    
    /** <p>Case which expresses motion to a location.</p> */
    public static final Resource lativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#lativeCase" );
    
    /** <p>A term that is legally defined and used in legally binding documents.</p> */
    public static final Resource legalTerm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#legalTerm" );
    
    public static final Resource letter = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#letter" );
    
    /** <p>verb participating in a complex predication that has little semantic content 
     *  of its own.</p>
     */
    public static final Resource lightVerb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#lightVerb" );
    
    /** <p>Case that indicates a final location of action or a time of the action.</p> */
    public static final Resource locativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#locativeCase" );
    
    /** <p>An expression used to represent a concept based on mathematical or logical 
     *  relations, such as statements of inequality, set relationships, boolean operations, 
     *  and the like.</p>
     */
    public static final Resource logicalExpression = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#logicalExpression" );
    
    /** <p>Main verb in contrast to a modal or an auxiliary.</p> */
    public static final Resource mainVerb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#mainVerb" );
    
    /** <p>Of, relating to, or constituting the gender that ordinarily includes most 
     *  words or grammatical forms referring to males.</p>
     */
    public static final Resource masculine = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#masculine" );
    
    /** <p>Designation of a term or word that is not countable and cannot generally be 
     *  used with the indefinite article or in the plural.</p>
     */
    public static final Resource massNoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#massNoun" );
    
    /** <p>Value for middle voice that expresses that the subject is both the agent and 
     *  object, or that the subject is separate from the agent or that the receiver 
     *  is the agent him/herself.</p>
     */
    public static final Resource middleVoice = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#middleVoice" );
    
    /** <p>Verb form that is usually used with another verb to express ideas such as 
     *  possibilities, permission, or intention.</p>
     */
    public static final Resource modal = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#modal" );
    
    /** <p>Currently in use.</p> */
    public static final Resource modern = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#modern" );
    
    /** <p>Unit resulting from the division of words into their smallest meaningful parts. 
     *  Note: moved to lexeme element from being an independent element; note that 
     *  this is currently an independent element in 12620</p>
     */
    public static final Resource morphologicalElement = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#morphologicalElement" );
    
    /** <p>A word that expresses the number of times something happened.</p> */
    public static final Resource multiplicativeNumeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#multiplicativeNumeral" );
    
    /** <p>Particle used to express negation.</p> */
    public static final Resource negativeParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#negativeParticle" );
    
    /** <p>Pronoun used in a context of a negation or for expressing a negation.</p> */
    public static final Resource negativePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#negativePronoun" );
    
    /** <p>Of, relating to, or constituting the gender that ordinarily includes most 
     *  words or grammatical forms referring to objects that are not characterized 
     *  as male or female.</p>
     */
    public static final Resource neuter = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#neuter" );
    
    /** <p>The register appropriate to general texts or discourse.</p> */
    public static final Resource neutralRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#neutralRegister" );
    
    /** <p>Value for negation.</p> */
    public static final Resource no = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#no" );
    
    /** <p>Case used to indicate the subject of a verb.</p> */
    public static final Resource nominativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#nominativeCase" );
    
    /** <p>Property related for verb forms occurring on their own only in dependent clauses 
     *  and lacking tense and mood contrasts.</p>
     */
    public static final Resource nonFinite = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#nonFinite" );
    
    /** <p>Part of speech used to express the name of a person, place, action or thing.</p> */
    public static final Resource noun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#noun" );
    
    /** <p>The component of a multiword or multi-morphemic compound term that is determined 
     *  or modified by the other components making up the term.</p>
     */
    public static final Resource nucleus = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#nucleus" );
    
    /** <p>Part of speech that expresses a number or the relation to a number.</p> */
    public static final Resource numeral = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#numeral" );
    
    /** <p>Word used to denote the denominator of a fraction.</p> */
    public static final Resource numeralFraction = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#numeralFraction" );
    
    /** <p>Case that is used when a noun is the object of a verb or a proposition, except 
     *  for nominative and vocative case.</p>
     */
    public static final Resource obliqueCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#obliqueCase" );
    
    /** <p>A term or lexeme which is no longer in common use.</p> */
    public static final Resource obsoleteForm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#obsoleteForm" );
    
    /** <p>Used in the past.</p> */
    public static final Resource old = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#old" );
    
    /** <p>Beginning of a pair of parenthesis.</p> */
    public static final Resource openParenthesis = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#openParenthesis" );
    
    /** <p>1951: An optional part of a headword. 1951; examples? The question arises 
     *  whether these are true options or whether the options reflect synonyms or 
     *  hyponyms (e.g., barrage, barrage de retenue). The question is not whether 
     *  1951 should use this markup, but rather how to map this markup in a global 
     *  environment.</p>
     */
    public static final Resource optionalElement = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#optionalElement" );
    
    /** <p>Adjective/numeral/number expressing a numeric ranking.</p> */
    public static final Resource ordinalAdjective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#ordinalAdjective" );
    
    /** <p>Perceived as related to animacy, but without specific reference to the previous 
     *  items.</p>
     */
    public static final Resource otherAnimacy = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#otherAnimacy" );
    
    /** <p>A grammatical category that indicates grammatical relationships between words 
     *  in sentences.</p>
     */
    public static final Resource otherGender = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#otherGender" );
    
    /** <p>Designation used to classify number-related grammatical information that can 
     *  differ from the standard European classifications cited above.</p>
     */
    public static final Resource otherNumber = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#otherNumber" );
    
    /** <p>A term or lexeme that has fallen from fashion, but the meaning of which is 
     *  readily recognizable.</p>
     */
    public static final Resource outdatedForm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#outdatedForm" );
    
    /** <p>A unique alphanumeric designation assigned to an object in a manufacturing 
     *  system.</p>
     */
    public static final Resource partNumber = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#partNumber" );
    
    /** <p>Term referring to a word derived from a verb and used as an adjective.</p> */
    public static final Resource participle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#participle" );
    
    /** <p>Adjective based on a verb.</p> */
    public static final Resource participleAdjective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#participleAdjective" );
    
    /** <p>Word that does not belong to one of the main classes of words, is invariable 
     *  in form, and typically has grammatical or pragmatic meaning.</p>
     */
    public static final Resource particle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#particle" );
    
    /** <p>Article expressing a part or quantity.</p> */
    public static final Resource partitiveArticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#partitiveArticle" );
    
    /** <p>Case that expresses the partial nature of the referent of the noun it marks, 
     *  as opposed to expressing the whole unit or class of which the referent is 
     *  a part.</p>
     */
    public static final Resource partitiveCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#partitiveCase" );
    
    /** <p>Term referring to a situation where the grammatical subject is typically the 
     *  recipient or goal of the action denoted by the verb.</p>
     */
    public static final Resource passiveVoice = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#passiveVoice" );
    
    /** <p>Past tense is an absolute tense that refers to a time before the moment of 
     *  utterance.</p>
     */
    public static final Resource past = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#past" );
    
    /** <p>Adjective based on a past participle.</p> */
    public static final Resource pastParticipleAdjective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#pastParticipleAdjective" );
    
    /** <p>Number that specifies 'a few' things.</p> */
    public static final Resource paucal = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#paucal" );
    
    /** <p>Perfective aspect is an aspect that expresses a temporal view of an event 
     *  or state as a simple whole, apart from the consideration of the internal structure 
     *  of the time in which it occurs.</p>
     */
    public static final Resource perfective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#perfective" );
    
    /** <p>Property that refers to the person.</p> */
    public static final Resource personal = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#personal" );
    
    /** <p>Pronoun referring a person.</p> */
    public static final Resource personalPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#personalPronoun" );
    
    /** <p>Any group of two or more words that form a unit, the meaning of which frequently 
     *  cannot be deduced based on the combined sense of the words making up the phrase.</p>
     */
    public static final Resource phraseologicalUnit = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#phraseologicalUnit" );
    
    /** <p>verb which has its own semantics</p> */
    public static final Resource plainVerb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#plainVerb" );
    
    /** <p>Value that expresses more than one element.The form of a term or word (usually 
     *  of a noun) used to designate more than one object.</p>
     */
    public static final Resource plural = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#plural" );
    
    /** <p>Sign (.) used to expresses the end of a sentence or an abbreviation.</p> */
    public static final Resource point = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#point" );
    
    /** <p>Value used in a comparison relationship when no comparison is involved.</p> */
    public static final Resource positive = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#positive" );
    
    /** <p>Relative to the possession or association.</p> */
    public static final Resource possessive = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#possessive" );
    
    /** <p>An adjective derived from a noun and denoting possession by the object described 
     *  by the noun.</p>
     */
    public static final Resource possessiveAdjective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#possessiveAdjective" );
    
    /** <p>Determiner that expresses ownership.</p> */
    public static final Resource possessiveDeterminer = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#possessiveDeterminer" );
    
    /** <p>Particle expressing ownship.</p> */
    public static final Resource possessiveParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#possessiveParticle" );
    
    /** <p>Pronoun that expresses ownership and relationships like ownership, such as 
     *  kinship, and other forms of association.</p>
     */
    public static final Resource possessivePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#possessivePronoun" );
    
    /** <p>A relative pronoun whose antecedent is the possessor of the subject or object 
     *  in the relative clause.</p>
     */
    public static final Resource possessiveRelativePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#possessiveRelativePronoun" );
    
    /** <p>Situation where the modifier is after the modified.</p> */
    public static final Resource postModifier = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#postModifier" );
    
    /** <p>Adposition that appears at the end of the noun phrase.</p> */
    public static final Resource postposition = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#postposition" );
    
    /** <p>Situation where the modifier is before the modified.</p> */
    public static final Resource preModifier = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#preModifier" );
    
    /** <p>A term rated according to the scale of a term acceptability rating as the 
     *  primary term for a given concept.</p>
     */
    public static final Resource preferredTerm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#preferredTerm" );
    
    public static final Resource prefix = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#prefix" );
    
    /** <p>Adposition placed at the beginning of a noun phrase.</p> */
    public static final Resource preposition = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#preposition" );
    
    /** <p>adverb which is very similar in its form to a preposition</p> */
    public static final Resource prepositionalAdverb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#prepositionalAdverb" );
    
    /** <p>Verb tense that indicates action or state of being in the present.</p> */
    public static final Resource present = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#present" );
    
    /** <p>Adjective based on a present participle.</p> */
    public static final Resource presentParticipleAdjective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#presentParticipleAdjective" );
    
    /** <p>pronoun that identify the current locative or temporal situation</p> */
    public static final Resource presentativePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#presentativePronoun" );
    
    /** <p>The simple past or preterite as distinct from the perfect form, e.g,, "showed" 
     *  not "shown"</p>
     */
    public static final Resource preterite = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#preterite" );
    
    /** <p>An attribute assigned to a term indicating that that term is the official 
     *  designator for a product.</p>
     */
    public static final Resource productName = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#productName" );
    
    /** <p>Case for a noun or a pronoun that expresses motion within a place or a period 
     *  of time needed for an event.</p>
     */
    public static final Resource prolativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#prolativeCase" );
    
    /** <p>adverb formed in replacement of a preposition and a pronoun</p> */
    public static final Resource pronominalAdverb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#pronominalAdverb" );
    
    /** <p>Word used in place of a noun or a noun phrase.</p> */
    public static final Resource pronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#pronoun" );
    
    /** <p>A noun or adjective denoting a single object.Noun that is the name of a specific 
     *  individual, place, or object.</p>
     */
    public static final Resource properNoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#properNoun" );
    
    /** <p>A brief popular axiom or saying.</p> */
    public static final Resource proverb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#proverb" );
    
    /** <p>Graphical mark used either at word level to indicate an abbreviation or at 
     *  a text level to separate phrases or sentences.</p>
     */
    public static final Resource punctuation = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#punctuation" );
    
    /** <p>Property related to four elements.</p> */
    public static final Resource quadrial = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#quadrial" );
    
    /** <p>Adjective used to qualify.</p> */
    public static final Resource qualifierAdjective = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#qualifierAdjective" );
    
    /** <p>Sign used to express a question.</p> */
    public static final Resource questionMark = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#questionMark" );
    
    /** <p>A basic identifiable component of every CJKV character, often found on the 
     *  left side of the character, that sometimes gives a rough indication of meaning 
     *  and is used for collating lexical and terminological resources.</p>
     */
    public static final Resource radical = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#radical" );
    
    /** <p>Said of a term that is almost never used.</p> */
    public static final Resource rarelyUsed = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#rarelyUsed" );
    
    /** <p>Pronoun expressing mutual relationship.</p> */
    public static final Resource reciprocalPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#reciprocalPronoun" );
    
    /** <p>Determiner that refers to the same entity.</p> */
    public static final Resource reflexiveDeterminer = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#reflexiveDeterminer" );
    
    /** <p>personal pronoun which is reflexive</p> */
    public static final Resource reflexivePersonalPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#reflexivePersonalPronoun" );
    
    /** <p>A possessive pronoun that refers to the subject as the possessor.</p> */
    public static final Resource reflexivePossessivePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#reflexivePossessivePronoun" );
    
    /** <p>A term defined by law or government regulation.</p> */
    public static final Resource regulatedTerm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#regulatedTerm" );
    
    /** <p>relation noun</p> */
    public static final Resource relationNoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#relationNoun" );
    
    /** <p>Determiner related to a referent.</p> */
    public static final Resource relativeDeterminer = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#relativeDeterminer" );
    
    /** <p>relative particle</p> */
    public static final Resource relativeParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#relativeParticle" );
    
    /** <p>Pronoun which introduces a relative clause and refers to something that has 
     *  been said before.</p>
     */
    public static final Resource relativePronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#relativePronoun" );
    
    /** <p>Second person deixis is deictic reference to a person or persons identified 
     *  as addressee.</p>
     */
    public static final Resource secondPerson = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#secondPerson" );
    
    /** <p>Sign (;) usually used to separate phrases.</p> */
    public static final Resource semiColon = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#semiColon" );
    
    /** <p>A fixed, lexicalized phrase.</p> */
    public static final Resource setPhrase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#setPhrase" );
    
    /** <p>For definiteness, when a specific form is not the syntactic subject of the 
     *  clause.</p>
     */
    public static final Resource shortArticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#shortArticle" );
    
    /** <p>A variant of a multiword term or lexeme that includes fewer words than the 
     *  full form.</p>
     */
    public static final Resource shortForm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#shortForm" );
    
    /** <p>The form of a term or word (usually of a noun) used to designate one object.Value 
     *  that expresses one element.</p>
     */
    public static final Resource singular = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#singular" );
    
    /** <p>An inventory item identified by a unique alphanumeric designation assigned 
     *  to an object in an inventory control system.</p>
     */
    public static final Resource sku = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#sku" );
    
    /** <p>An extremely informal register of a word, term, or text that is used in spoken 
     *  and everyday language and less commonly in documents.</p>
     */
    public static final Resource slangRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#slangRegister" );
    
    /** <p>The punctuation sign /</p> */
    public static final Resource slash = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#slash" );
    
    /** <p>Case related to the person in whose company the action is carried out, or 
     *  to any belongings of people which take part in the action.</p>
     */
    public static final Resource sociativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#sociativeCase" );
    
    /** <p>A fixed chunk of recurring text.</p> */
    public static final Resource standardText = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#standardText" );
    
    /** <p>A term that has been standardized by a standardizing body.</p> */
    public static final Resource standardizedTerm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#standardizedTerm" );
    
    /** <p>A chunk of text used in a software interface, documentation, help file, or 
     *  the like.</p>
     */
    public static final Resource string = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#string" );
    
    /** <p>A type value assigned to a string.</p> */
    public static final Resource stringCategory = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#stringCategory" );
    
    /** <p>Personal pronoun that can occupy the position after a preposition and/or reinforce 
     *  a weak personal pronoun.</p>
     */
    public static final Resource strongPersonalPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#strongPersonalPronoun" );
    
    /** <p>...Mood often used to express uncertainty, whishes or desires.</p> */
    public static final Resource subjunctive = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#subjunctive" );
    
    /** <p>Case for a move of something to the surface of another object.</p> */
    public static final Resource sublativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#sublativeCase" );
    
    /** <p>Conjunction that links constructions by making one of them a constituent of 
     *  another. The subordinating conjunction typically marks the incorporated constituent.</p>
     */
    public static final Resource subordinatingConjunction = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#subordinatingConjunction" );
    
    public static final Resource suffix = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#suffix" );
    
    /** <p>Case indicating location on top of something or on the surface of something.</p> */
    public static final Resource superessiveCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#superessiveCase" );
    
    /** <p>Value used in a comparison between more than two entities.</p> */
    public static final Resource superlative = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#superlative" );
    
    /** <p>Particle expressing superlative degree. Superlative is the comparison between 
     *  more than two entities and contrasts with comparative where only two entities 
     *  are involved and positive where no comparison is implied.</p>
     */
    public static final Resource superlativeParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#superlativeParticle" );
    
    /** <p>A term that is no longer preferred or admitted.</p> */
    public static final Resource supersededTerm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#supersededTerm" );
    
    /** <p>Sequence of three dots having the same meaning as &amp;quot;et cetera&amp;quot; 
     *  (full form) or &amp;quot;etc&amp;quot; (abbreviated form).</p>
     */
    public static final Resource suspensionPoints = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#suspensionPoints" );
    
    /** <p>A unit of spoken language that is next bigger than a speech sound and consists 
     *  of one or more vowel sounds alone or of a syllabic consonant alone or of either 
     *  with one or more consonant sounds preceding or following.</p>
     */
    public static final Resource syllable = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#syllable" );
    
    public static final Resource symbol = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#symbol" );
    
    public static final Resource tabooRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#tabooRegister" );
    
    /** <p>The register appropriate to scientific texts or special languages.</p> */
    public static final Resource technicalRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#technicalRegister" );
    
    /** <p>Case that indicates to what or where something ends.</p> */
    public static final Resource terminativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#terminativeCase" );
    
    /** <p>Third person deixis is deictic reference to a referent(s) not identified as 
     *  the speaker or addressee.</p>
     */
    public static final Resource thirdPerson = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#thirdPerson" );
    
    /** <p>A form of a term or lexeme resulting from an operation whereby the characters 
     *  of one writing system are represented by characters from another writing system, 
     *  taking into account the pronunciation of the characters converted.</p>
     */
    public static final Resource transcribedForm = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#transcribedForm" );
    
    /** <p>Case indicating that the referent of the noun, or the quality of the adjective, 
     *  that it marks is the result of a process of change.</p>
     */
    public static final Resource translativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#translativeCase" );
    
    /** <p>Grammatical number referring to 'three things', as opposed to 'singular' and 
     *  'plural'.</p>
     */
    public static final Resource trial = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#trial" );
    
    /** <p>aspect that expresses an event or state that is not finished.</p> */
    public static final Resource unaccomplished = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#unaccomplished" );
    
    /** <p>Particle that is not covered by other sorts of particle definitions.</p> */
    public static final Resource unclassifiedParticle = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#unclassifiedParticle" );
    
    /** <p>Element which, singly or in combination with other verbs is used as the minimal 
     *  predicate of a sentence, co-occurring with a subject. If the predicate contains 
     *  other elements (e.g. object, complement), then it is the verb which more than 
     *  any other is the unit which influences the choice and extent of these elements.</p>
     */
    public static final Resource verb = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#verb" );
    
    /** <p>Case used to indicate direct address.</p> */
    public static final Resource vocativeCase = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#vocativeCase" );
    
    /** <p>The register of a term or text type that can be characterized as profane or 
     *  socially unacceptable.Register of a term or text type that can be characterized 
     *  as profane or socially unacceptable.</p>
     */
    public static final Resource vulgarRegister = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#vulgarRegister" );
    
    /** <p>Personal pronoun that cannot occupy the position after a preposition and/or 
     *  reinforce a strong personal pronoun.</p>
     */
    public static final Resource weakPersonalPronoun = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#weakPersonalPronoun" );
    
    /** <p>Any lexeme element in a compound lexical unit that is itself a word.</p> */
    public static final Resource wordElement = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#wordElement" );
    
    /** <p>Positive value</p> */
    public static final Resource yes = m_model.createResource( "http://www.lexinfo.net/ontology/2.0/lexinfo#yes" );
    
}
