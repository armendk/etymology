/* CVS $Id: $ */
package org.getalp.dbnary; 
import com.hp.hpl.jena.rdf.model.*;
 
/**
 * Vocabulary definitions from /Users/esterpantaleo/src/etymology/dbnary/trunk/ontology/src/main/resources/org/getalp/dbnary/lemon.ttl 
 * @author Auto-generated by schemagen on 04 Jul 2016 15:37 
 */
public class LemonOnt {
    /** <p>The RDF model that holds the vocabulary terms</p> */
    private static Model m_model = ModelFactory.createDefaultModel();
    
    /** <p>The namespace of the vocabulary as a string</p> */
    public static final String NS = "http://lemon-model.net/lemon#";
    
    /** <p>The namespace of the vocabulary as a string</p>
     *  @see #NS */
    public static String getURI() {return NS;}
    
    /** <p>The namespace of the vocabulary as a resource</p> */
    public static final Resource NAMESPACE = m_model.createResource( NS );
    
    /** <p>A representation of a lexical entry that should not be considered canonical. 
     *  This is primarily from a linguistic view for non-realisable forms such as 
     *  stems but may also include misspellings and other unusual forms</p>
     */
    public static final Property abstractForm = m_model.createProperty( "http://lemon-model.net/lemon#abstractForm" );
    
    /** <p>The sense of a non-preferred but admissible lexicalization of a given ontology 
     *  entity</p>
     */
    public static final Property altRef = m_model.createProperty( "http://lemon-model.net/lemon#altRef" );
    
    /** <p>Denotes that one sense is broader than another. From a lexical point of view 
     *  this means replacing one lexical entry with another generalizes the meaning 
     *  of the phrase. From an ontological point of view this property makes not strong 
     *  assertions. From a mapping point of view if the broader sense applies the 
     *  narrower sense must also</p>
     */
    public static final Property broader = m_model.createProperty( "http://lemon-model.net/lemon#broader" );
    
    /** <p>The canonical ("dictionary") form of the lexical entry. This can be used to 
     *  indicate the "lemma" form of a lexical entry</p>
     */
    public static final Property canonicalForm = m_model.createProperty( "http://lemon-model.net/lemon#canonicalForm" );
    
    /** <p>Indicates an evaluable test, the is necessary for this sense to apply</p> */
    public static final Property condition = m_model.createProperty( "http://lemon-model.net/lemon#condition" );
    
    public static final Property constituent = m_model.createProperty( "http://lemon-model.net/lemon#constituent" );
    
    /** <p>Denotes the pragmatic or discursive context of a sense mapping or a constraint 
     *  on the mapping by syntactic or semantic properites</p>
     */
    public static final Property context = m_model.createProperty( "http://lemon-model.net/lemon#context" );
    
    /** <p>Denotes a component of a lexical entry</p> */
    public static final Property decomposition = m_model.createProperty( "http://lemon-model.net/lemon#decomposition" );
    
    /** <p>Indicates a natural language definition. Note there is a pseudo-node to allow 
     *  for further description of the definition (e.g., source, creation date etc.). 
     *  The value property should be used to indicate the string value of the definition.</p>
     */
    public static final Property definition = m_model.createProperty( "http://lemon-model.net/lemon#definition" );
    
    /** <p>Denotes the relation between a node in a multi-word expression structure and 
     *  an edge</p>
     */
    public static final Property edge = m_model.createProperty( "http://lemon-model.net/lemon#edge" );
    
    /** <p>Denotes the lexical entry represented by the component</p> */
    public static final Property element = m_model.createProperty( "http://lemon-model.net/lemon#element" );
    
    /** <p>Indicates an entry in a lexicon</p> */
    public static final Property entry = m_model.createProperty( "http://lemon-model.net/lemon#entry" );
    
    /** <p>Indicates that two senses are equivalent. From a lexical point of view , this 
     *  indicates that the lexical entries can be substituted for each other with 
     *  no change in meaning. From an ontological point of view it means that the 
     *  two references are not disjoint. From a mapping point of view it means if 
     *  one mapping apply the other must necessarily apply</p>
     */
    public static final Property equivalent = m_model.createProperty( "http://lemon-model.net/lemon#equivalent" );
    
    public static final Property example = m_model.createProperty( "http://lemon-model.net/lemon#example" );
    
    /** <p>A raisable semantic argument is not in fact the semantic argument of the current 
     *  frame-sense but instead is "raised" into a frame-sense used for an argument. 
     *  For example the phrase "John seemed to be happy", is interpreted as "it seemed 
     *  that X" where X is "John is happy", hence the subject of "seem" is a raisable 
     *  argument.</p>
     */
    public static final Property extrinsicArg = m_model.createProperty( "http://lemon-model.net/lemon#extrinsicArg" );
    
    public static final Property formVariant = m_model.createProperty( "http://lemon-model.net/lemon#formVariant" );
    
    public static final Property generates = m_model.createProperty( "http://lemon-model.net/lemon#generates" );
    
    /** <p>The sense of a non-admissible lexicalization for a ontology entity. This is 
     *  used to denote incorrect or deprecated language that may be useful for information 
     *  extraction but not generation</p>
     */
    public static final Property hiddenRef = m_model.createProperty( "http://lemon-model.net/lemon#hiddenRef" );
    
    /** <p>Says that the two senses are disjoint. From a lexical point of view, this 
     *  means substituting the lexical entries must change the meaning of the phrase. 
     *  From an ontological point of view, this property is implied if both references 
     *  are also disjoint, but does not imply disjointness, but non-equivalence of 
     *  the references. For the mapping point of view there is not instance when both 
     *  mappings are valid.</p>
     */
    public static final Property incompatible = m_model.createProperty( "http://lemon-model.net/lemon#incompatible" );
    
    /** <p>Denotes that the single argument of a class predicate is represented in the 
     *  lexicon by the given semantic argument. That is Class(?x) or ?x rdf:type Class</p>
     */
    public static final Property isA = m_model.createProperty( "http://lemon-model.net/lemon#isA" );
    
    /** <p>Indicate that a reference has a given sense</p> */
    public static final Property isReferenceOf = m_model.createProperty( "http://lemon-model.net/lemon#isReferenceOf" );
    
    /** <p>Indicate that a sense is realised by the given lexical entry</p> */
    public static final Property isSenseOf = m_model.createProperty( "http://lemon-model.net/lemon#isSenseOf" );
    
    /** <p>The language of a given lexicon. This should be some ISO-639 string</p> */
    public static final Property language = m_model.createProperty( "http://lemon-model.net/lemon#language" );
    
    /** <p>Denotes the component referred to by the lex (pre-terminal) of the phrase 
     *  structure</p>
     */
    public static final Property leaf = m_model.createProperty( "http://lemon-model.net/lemon#leaf" );
    
    /** <p>Denotes a written representation of a lexical entry</p> */
    public static final Property lexicalForm = m_model.createProperty( "http://lemon-model.net/lemon#lexicalForm" );
    
    /** <p>Indicates a non-semantic relationship between two lexical entries. E.g., a 
     *  term is derived from another term, such as "lexical" and "lexicalize"</p>
     */
    public static final Property lexicalVariant = m_model.createProperty( "http://lemon-model.net/lemon#lexicalVariant" );
    
    /** <p>Denotes the marker of a semantic argument. This should generally either be 
     *  a semantic property i.e., case or another lexical entry e.g., a preposition 
     *  or particle</p>
     */
    public static final Property marker = m_model.createProperty( "http://lemon-model.net/lemon#marker" );
    
    /** <p>Denotes that one sense is narrower than another. From a lexical point of view 
     *  this means replacing one lexical entry with another specializes the meaning 
     *  of the phrase. From an ontological point of view this property makes not strong 
     *  assertions. From a mapping point of view if the broader sense applies the 
     *  narrower sense must also</p>
     */
    public static final Property narrower = m_model.createProperty( "http://lemon-model.net/lemon#narrower" );
    
    public static final Property nextTransform = m_model.createProperty( "http://lemon-model.net/lemon#nextTransform" );
    
    /** <p>Indicates the semantic argument which represents the objects (ranges) of the 
     *  property referred to by this sense</p>
     */
    public static final Property objOfProp = m_model.createProperty( "http://lemon-model.net/lemon#objOfProp" );
    
    /** <p>Denotes that the syntactic argument is optional (may be omitted)</p> */
    public static final Property optional = m_model.createProperty( "http://lemon-model.net/lemon#optional" );
    
    /** <p>A non-preferred ("non-dictionary") representation of a lexical entry. This 
     *  should be variant that is either a morphological variant, an abbreviation, 
     *  short form or acronym</p>
     */
    public static final Property otherForm = m_model.createProperty( "http://lemon-model.net/lemon#otherForm" );
    
    public static final Property pattern = m_model.createProperty( "http://lemon-model.net/lemon#pattern" );
    
    /** <p>Indicates the head node of a phrase structure or dependency parse graph</p> */
    public static final Property phraseRoot = m_model.createProperty( "http://lemon-model.net/lemon#phraseRoot" );
    
    /** <p>The sense of the preferred lexicalization of a given ontology entity</p> */
    public static final Property prefRef = m_model.createProperty( "http://lemon-model.net/lemon#prefRef" );
    
    /** <p>Denotes a lexical property of a lexical entry, form, component or MWE node. 
     *  For the lexical entry this is assumed to be static properties e.g., part of 
     *  speech and gender and for the others this is assumed to be specific properties 
     *  e.g., case, number</p>
     */
    public static final Property property = m_model.createProperty( "http://lemon-model.net/lemon#property" );
    
    /** <p>Indicates a restrictions on the domain of the property. That is, this sense 
     *  only applies if the property the sense refers to has a subject in the class 
     *  referred to by this property</p>
     */
    public static final Property propertyDomain = m_model.createProperty( "http://lemon-model.net/lemon#propertyDomain" );
    
    /** <p>Indicates a restrictions on the range of the property. That is, this sense 
     *  only applies if the property the sense refers to has a object in the class 
     *  referred to by this property</p>
     */
    public static final Property propertyRange = m_model.createProperty( "http://lemon-model.net/lemon#propertyRange" );
    
    /** <p>A reference to an external resource</p> */
    public static final Property reference = m_model.createProperty( "http://lemon-model.net/lemon#reference" );
    
    /** <p>A realisation of a given form</p> */
    public static final Property representation = m_model.createProperty( "http://lemon-model.net/lemon#representation" );
    
    public static final Property rule = m_model.createProperty( "http://lemon-model.net/lemon#rule" );
    
    /** <p>Denotes a semantic argument slot of a semantic unit</p> */
    public static final Property semArg = m_model.createProperty( "http://lemon-model.net/lemon#semArg" );
    
    /** <p>Indicates the sense of a lexical entry</p> */
    public static final Property sense = m_model.createProperty( "http://lemon-model.net/lemon#sense" );
    
    /** <p>Denotes a relationship between senses</p> */
    public static final Property senseRelation = m_model.createProperty( "http://lemon-model.net/lemon#senseRelation" );
    
    /** <p>Indicates the graphical element used to seperate the subnodes of this phrase 
     *  structure. It is generally recommended that you use a string value with the 
     *  language tag used to indicate script, (i.e., using ISO-15924 codes, such as 
     *  "Latn"), as orthographic features may change with script.</p>
     */
    public static final Property separator = m_model.createProperty( "http://lemon-model.net/lemon#separator" );
    
    /** <p>Indicates the semantic argument which represents the subjects (domain) of 
     *  the property referred to by this sense</p>
     */
    public static final Property subjOfProp = m_model.createProperty( "http://lemon-model.net/lemon#subjOfProp" );
    
    /** <p>Indicates that the relation between a compound sense and its atomic subsenses</p> */
    public static final Property subsense = m_model.createProperty( "http://lemon-model.net/lemon#subsense" );
    
    /** <p>Indicates a slot in a syntactic frame</p> */
    public static final Property synArg = m_model.createProperty( "http://lemon-model.net/lemon#synArg" );
    
    /** <p>Indicates a syntactic behavior of a lexical entry</p> */
    public static final Property synBehavior = m_model.createProperty( "http://lemon-model.net/lemon#synBehavior" );
    
    /** <p>Indicates the topic of the overrall lexicon, this is property is sometimes 
     *  called "subject field". Note that in addition to the topic of a lexicon each 
     *  lexical entry may belong to a given domain, this can be modelled as equal 
     *  or not equal to the topic of the associated lexicon</p>
     */
    public static final Property topic = m_model.createProperty( "http://lemon-model.net/lemon#topic" );
    
    public static final Property transform = m_model.createProperty( "http://lemon-model.net/lemon#transform" );
    
    public static final Property tree = m_model.createProperty( "http://lemon-model.net/lemon#tree" );
    
    /** <p>This indicates the value of a pseudo-data node. An example of this is definition 
     *  where the value would generally be a string but it would not be possible to 
     *  add further annotations, such as source or creation date.</p>
     */
    public static final Property value = m_model.createProperty( "http://lemon-model.net/lemon#value" );
    
    /** <p>Gives the written representation of a given form</p> */
    public static final Property writtenRep = m_model.createProperty( "http://lemon-model.net/lemon#writtenRep" );
    
    /** <p>A slot representing a gap that must be filled in realising a lexical entry 
     *  in a given projection</p>
     */
    public static final Resource Argument = m_model.createResource( "http://lemon-model.net/lemon#Argument" );
    
    /** <p>A constituent element of a lexical entry. This may be a word in a multi-word 
     *  lexical element or a constituent of a compound word</p>
     */
    public static final Resource Component = m_model.createResource( "http://lemon-model.net/lemon#Component" );
    
    /** <p>A node within a list of components. This should generally be a blank node,see 
     *  rdf:List</p>
     */
    public static final Resource ComponentList = m_model.createResource( "http://lemon-model.net/lemon#ComponentList" );
    
    /** <p>A given written or spoken realisation of a lexical entry</p> */
    public static final Resource Form = m_model.createResource( "http://lemon-model.net/lemon#Form" );
    
    /** <p>A stereotypical example of the usage of a given lexical entry. The most common 
     *  example of projections are subcategorization frames which describe the slots 
     *  taken by the arguments of a verb.</p>
     */
    public static final Resource Frame = m_model.createResource( "http://lemon-model.net/lemon#Frame" );
    
    /** <p>Structural element for all elements that can be tagged with a language</p> */
    public static final Resource HasLanguage = m_model.createResource( "http://lemon-model.net/lemon#HasLanguage" );
    
    public static final Resource HasPattern = m_model.createResource( "http://lemon-model.net/lemon#HasPattern" );
    
    public static final Resource LemonElement = m_model.createResource( "http://lemon-model.net/lemon#LemonElement" );
    
    /** <p>An evaluable condition on when a sense applies.</p> */
    public static final Resource LexicalCondition = m_model.createResource( "http://lemon-model.net/lemon#LexicalCondition" );
    
    /** <p>Indicates the pragmatic or discourse context in which a sense applies</p> */
    public static final Resource LexicalContext = m_model.createResource( "http://lemon-model.net/lemon#LexicalContext" );
    
    /** <p>An entry in the lexicon. This may be any morpheme, word, compound, phrase 
     *  or clause that is included in the lexicon</p>
     */
    public static final Resource LexicalEntry = m_model.createResource( "http://lemon-model.net/lemon#LexicalEntry" );
    
    /** <p>Represents the intersection in meaning between the lexical entry and the ontology 
     *  entity. This is used as the ontology entity and lexical entry may not be in 
     *  one-to-one correspondence as such the existence of a sense between them states 
     *  meerly that there are some cases when this lexical entry refer to the ontology 
     *  entity and vica versa. Mapping elements can be used to further specify this 
     *  relation</p>
     */
    public static final Resource LexicalSense = m_model.createResource( "http://lemon-model.net/lemon#LexicalSense" );
    
    /** <p>Indicates the topic of a lexicon or a lexical entry</p> */
    public static final Resource LexicalTopic = m_model.createResource( "http://lemon-model.net/lemon#LexicalTopic" );
    
    /** <p>The lexicon object. This object is specific to the given language and/or domain 
     *  it describes</p>
     */
    public static final Resource Lexicon = m_model.createResource( "http://lemon-model.net/lemon#Lexicon" );
    
    public static final Resource MorphPattern = m_model.createResource( "http://lemon-model.net/lemon#MorphPattern" );
    
    public static final Resource MorphTransform = m_model.createResource( "http://lemon-model.net/lemon#MorphTransform" );
    
    /** <p>A node in a phrase structure or dependency parse graph</p> */
    public static final Resource Node = m_model.createResource( "http://lemon-model.net/lemon#Node" );
    
    /** <p>The class of constituents, that is types applied to nodes in a phrase structure 
     *  graph</p>
     */
    public static final Resource NodeConstituent = m_model.createResource( "http://lemon-model.net/lemon#NodeConstituent" );
    
    /** <p>An affix is a morpheme that is attached to a word stem to form a new word. 
     *  Use this for lexical entries with only abstract forms</p>
     */
    public static final Resource Part = m_model.createResource( "http://lemon-model.net/lemon#Part" );
    
    /** <p>A phrase in lemon is defined in the looser sense of a sequence of words, it 
     *  does not have to a fully grammatical phrase</p>
     */
    public static final Resource Phrase = m_model.createResource( "http://lemon-model.net/lemon#Phrase" );
    
    /** <p>A terminal node in a phrase structure graph, i.e., a realisable, lexical element.</p> */
    public static final Resource PhraseElement = m_model.createResource( "http://lemon-model.net/lemon#PhraseElement" );
    
    /** <p>A value that can be used in the range of linguistic property</p> */
    public static final Resource PropertyValue = m_model.createResource( "http://lemon-model.net/lemon#PropertyValue" );
    
    public static final Resource Prototype = m_model.createResource( "http://lemon-model.net/lemon#Prototype" );
    
    /** <p>Indicates a logical condition that is used indicate when a particular term 
     *  has the given meaning</p>
     */
    public static final Resource SenseCondition = m_model.createResource( "http://lemon-model.net/lemon#SenseCondition" );
    
    /** <p>Indicates the context in which a term is to be used. The context refers not 
     *  to the immediate syntactic context, but the document and register the document 
     *  is used in</p>
     */
    public static final Resource SenseContext = m_model.createResource( "http://lemon-model.net/lemon#SenseContext" );
    
    /** <p>A definition of a sememe, that is the a text describing the exact meaning 
     *  of the lexical entry when its sense is the given ontology reference</p>
     */
    public static final Resource SenseDefinition = m_model.createResource( "http://lemon-model.net/lemon#SenseDefinition" );
    
    /** <p>The indicator of a given syntactic argument, normally a preposition or other 
     *  particle marker or a linguistic property such as case</p>
     */
    public static final Resource SynRoleMarker = m_model.createResource( "http://lemon-model.net/lemon#SynRoleMarker" );
    
    /** <p>An example of the usage of a lexical entry when refering to the ontology entity 
     *  given by the sememe's reference. This should in effect be an example of the 
     *  form used in context. E.g., "this is a *usage example*"</p>
     */
    public static final Resource UsageExample = m_model.createResource( "http://lemon-model.net/lemon#UsageExample" );
    
    /** <p>A word is a single unit of writing or speech. In languages written in Latin, 
     *  Cyrillic, Greek, Arabic scripts etc. these are assumed to be separated by 
     *  white-space characters. For Chinese, Japanese, Korean this should correspond 
     *  to some agreed segmentation scheme.</p>
     */
    public static final Resource Word = m_model.createResource( "http://lemon-model.net/lemon#Word" );
    
}
